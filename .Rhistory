rm(list=ls(all=TRUE))
library(MCMCpack)
library('Rcpp')
library('RcppArmadillo')
set.seed(10)
#get functions
setwd('U:\\GIT_models\\git_LDA_MS')
source('LDA cov and LDA no cov.R')
#get data
setwd('U:\\bony\\big_plot\\derived data')
tmp=read.csv('g10 aggregated.csv',as.is=T)
ind=which(colnames(tmp)%in%c('x','y','ano'))
dat=tmp[,ind]
y=data.matrix(dat)
xmat=data.matrix(cbind(1,read.csv('g10 aggregated xmat1.csv',as.is=T)))
#basic settings
ngibbs=10000
nburn=ngibbs/2
#priors
phi.prior=0.01
a.gamma=b.gamma=0.1
var.betas=1
waic=rep(NA,15)
for (ncomm in 2:15){
#run Gibbs sampler
res=LDAcov(y=y,xmat=xmat,ncomm=ncomm,
phi.prior=phi.prior,a.gamma=a.gamma,b.gamma=b.gamma,
ngibbs=ngibbs,nburn=nburn,var.betas=var.betas)
#calculate WAIC
plot(res$llk,type='l',main=ncomm)
abline(v=nburn,col='blue')
seq1=nburn:ngibbs
tmp=res$llk.ind.out[seq1,]
p1=-2*sum(log(colMeans(exp(tmp))))
p2=2*sum(apply(tmp,2,var))
waic[ncomm]=p1+p2;
}
par(mfrow=c(1,1))
plot(waic,type='l')
rm(list=ls(all=TRUE))
library(MCMCpack)
library('Rcpp')
library('RcppArmadillo')
set.seed(10)
#get functions
setwd('U:\\GIT_models\\git_LDA_MS')
source('LDA cov and LDA no cov.R')
#get data
setwd('U:\\bony\\big_plot\\derived data')
tmp=read.csv('g10 aggregated.csv',as.is=T)
ind=which(colnames(tmp)%in%c('x','y','ano'))
dat=tmp[,ind]
y=data.matrix(dat)
xmat=data.matrix(cbind(1,read.csv('g10 aggregated xmat1.csv',as.is=T)))
#basic settings
ngibbs=10000
nburn=ngibbs/2
#priors
phi.prior=0.01
a.gamma=b.gamma=0.1
var.betas=1
waic=rep(NA,15)
setwd('U:\\GIT_models\\LdaPoisson_nocov')
source('LdaPoisson_nocov main function.R')
source('LdaPoisson_nocov aux functions.R')
sourceCpp('LdaPoisson_nocov_aux_cpp.cpp')
res=gibbs.LDA.nocov(ncomm=ncomm,ngibbs=ngibbs,nburn=nburn,y=y,
phi.prior=phi.prior,a.gamma=a.gamma,b.gamma=b.gamma)
nloc=nrow(y)
nspp=ncol(y)
array.lsk.init=res$array.lsk
ncomm=2
setwd('U:\\GIT_models\\LdaPoisson_nocov')
source('LdaPoisson_nocov main function.R')
source('LdaPoisson_nocov aux functions.R')
sourceCpp('LdaPoisson_nocov_aux_cpp.cpp')
res=gibbs.LDA.nocov(ncomm=ncomm,ngibbs=ngibbs,nburn=nburn,y=y,
phi.prior=phi.prior,a.gamma=a.gamma,b.gamma=b.gamma)
nloc=nrow(y)
nspp=ncol(y)
array.lsk.init=res$array.lsk
setwd('U:\\GIT_models\\git_LDA_MS')
source('LDA cov main function.R')
source('LDA cov aux functions.R')
sourceCpp('LDA_cov_aux1_cpp.cpp')
res=gibbs.LDA.cov(ncomm=ncomm,ngibbs=ngibbs,nburn=nburn,y=y,xmat=xmat,
phi.prior=phi.prior,array.lsk.init=array.lsk.init,
a.gamma=a.gamma,b.gamma=b.gamma,var.betas=var.betas)
nparam=ncol(xmat)
nloc=nrow(y)
nspp=ncol(y)
#initial values
array.lsk=array.lsk.init
nlk=apply(array.lsk,c(1,3),sum)
betas=matrix(0,nparam,ncomm)
lambda=rep(0,ncomm)
for (i in 1:ncomm){
dat.tmp=cbind(nlk[,i],xmat)
colnames(dat.tmp)=c('y',paste0('cov',1:ncol(xmat)))
dat.tmp1=as.data.frame(dat.tmp)
res=glm(y~.,data=dat.tmp1,family='poisson')
lambda[i]=exp(res$coef[1])
betas[,i]=res$coef[-1]
}
nks=t(apply(array.lsk,2:3,sum))
phi=nks/apply(nks,1,sum); apply(phi,1,sum)
#to store outcomes from gibbs sampler
lambda.out=matrix(NA,ngibbs,ncomm)
phi.out=matrix(NA,ngibbs,nspp*ncomm)
nlk.out=matrix(NA,ngibbs,nloc*ncomm)
llk.out=rep(NA,ngibbs)
llk.ind.out=matrix(NA,ngibbs,nloc)
betas.out=matrix(NA,ngibbs,nparam*ncomm)
#useful stuff for MH algorithm
accept1=list(betas=matrix(0,nparam,ncomm))
jump1=list(betas=matrix(0.1,nparam,ncomm))
accept.output=50
nadapt=ngibbs/2
#run gibbs sampler
options(warn=2)
lpmedia=xmat%*%betas
pmedia=exp(lpmedia)
pmedia.soma=colSums(pmedia)+b.gamma
lp1=lpmedia-matrix(log(pmedia.soma),nloc,ncomm,byrow=T)
nk=colSums(nlk)
#sample z
tmp = SampleArray(Arraylsk=array.lsk, nloc=nloc,nspp=nspp,ncomm=ncomm,
y=y,lp1=lp1,runif1=runif(sum(y)),
nk=nk,nks=nks, PriorPhi=phi.prior, agamma=a.gamma)
array.lsk=tmp$ArrayLSK
nlk=apply(array.lsk,c(1,3),sum)
nks=t(apply(array.lsk,2:3,sum))
tmp=sample.betas(nlk=nlk,xmat=xmat,betas=betas,
ncomm=ncomm,nparam=nparam,jump=jump1$betas,
a.gamma=a.gamma,b.gamma=b.gamma,var.betas=var.betas)
betas=tmp$betas
betas
head(xmat)
nparam=ncol(xmat)
nloc=nrow(y)
nspp=ncol(y)
#initial values
array.lsk=array.lsk.init
nlk=apply(array.lsk,c(1,3),sum)
betas=matrix(0,nparam,ncomm)
lambda=rep(0,ncomm)
for (i in 1:ncomm){
dat.tmp=cbind(nlk[,i],xmat)
colnames(dat.tmp)=c('y',paste0('cov',1:ncol(xmat)))
dat.tmp1=as.data.frame(dat.tmp)
res=glm(y~.,data=dat.tmp1,family='poisson')
lambda[i]=exp(res$coef[1])
betas[,i]=res$coef[-1]
}
betas
rm(list=ls(all=TRUE))
library(MCMCpack)
library('Rcpp')
library('RcppArmadillo')
set.seed(10)
#get functions
setwd('U:\\GIT_models\\git_LDA_MS')
source('LDA cov and LDA no cov.R')
#get data
setwd('U:\\bony\\big_plot\\derived data')
tmp=read.csv('g10 aggregated.csv',as.is=T)
ind=which(colnames(tmp)%in%c('x','y','ano'))
dat=tmp[,ind]
y=data.matrix(dat)
xmat=data.matrix(read.csv('g10 aggregated xmat1.csv',as.is=T))
#basic settings
ngibbs=10000
nburn=ngibbs/2
#priors
phi.prior=0.01
a.gamma=b.gamma=0.1
var.betas=1
waic=rep(NA,15)
for (ncomm in 2:15){
#run Gibbs sampler
res=LDAcov(y=y,xmat=xmat,ncomm=ncomm,
phi.prior=phi.prior,a.gamma=a.gamma,b.gamma=b.gamma,
ngibbs=ngibbs,nburn=nburn,var.betas=var.betas)
#calculate WAIC
plot(res$llk,type='l',main=ncomm)
abline(v=nburn,col='blue')
seq1=nburn:ngibbs
tmp=res$llk.ind.out[seq1,]
p1=-2*sum(log(colMeans(exp(tmp))))
p2=2*sum(apply(tmp,2,var))
waic[ncomm]=p1+p2;
}
setwd("U:\\GIT_models\\LdaPoisson_nocov")
ncomm
par(mfrow=c(1,1))
plot(waic,type='l')
for (ncomm in 13:15){
#run Gibbs sampler
res=LDAcov(y=y,xmat=xmat,ncomm=ncomm,
phi.prior=phi.prior,a.gamma=a.gamma,b.gamma=b.gamma,
ngibbs=ngibbs,nburn=nburn,var.betas=var.betas)
#calculate WAIC
plot(res$llk,type='l',main=ncomm)
abline(v=nburn,col='blue')
seq1=nburn:ngibbs
tmp=res$llk.ind.out[seq1,]
p1=-2*sum(log(colMeans(exp(tmp))))
p2=2*sum(apply(tmp,2,var))
waic[ncomm]=p1+p2;
}
par(mfrow=c(1,1))
plot(waic,type='l')
