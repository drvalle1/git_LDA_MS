b0=log(runif(ncommun,min=5,max=8))
betas.true=betas=rbind(b0,diag(1,ncommun))
#get means
media.true=media=exp(xmat%*%betas); range(media)
head(media)
#generate N_lk
par(mfrow=c(1,1),mar=rep(4,4))
nlk=matrix(NA,nloc,ncommun)
NBN=20 #when this is large, we get into areas with relatively flat loglikel, giving trouble to the slice sampler
for (i in 1:ncommun){
nlk[,i]=rnbinom(nloc,mu=media[,i],size=NBN)
}
nlk.true=nlk; boxplot(nlk)
soma=apply(nlk,1,sum); sum(soma==0)
theta.true=theta=nlk/soma; apply(theta,1,sum);
boxplot(theta); apply(theta,2,range); apply(theta>0.95,2,mean)
nl=apply(nlk,1,sum)
hist(nl)
sum(nl)
plot(media,nlk)
#generate phi:
#- assume that each species is strongly present in a single group
#- Avoid very rare species (species that are almost never present)
tmp=matrix(0,ncommun,nspp)
base=nspp/ncommun
margin1=floor(base*0.2)
seq1=c(seq(from=1,to=nspp,by=base),nspp-margin1)
for (i in 1:(length(seq1)-1)){ #add some zeroes
seq2=seq1[i]:(seq1[i+1]+margin1)
tmp[i,seq2]=1
}
phi=tmp/matrix(rowSums(tmp),ncommun,nspp) #re-scale to make sure it sums to 1
phi.true=phi
# round(phi[,1:20],2)
# table(round(phi,2))
unique(rowSums(phi))
phi.true=phi
image(phi)
rm(list=ls(all=TRUE))
library(MCMCpack)
set.seed(201)
nloc=2000
nspp=200
ncommun=4
#design matrix
xmat=matrix(runif(nloc*ncommun,min=-1,max=3),nloc,ncommun)
#pure sites
tmp=matrix(-3,ncommun,ncommun)
diag(tmp)=2
num1=floor(nloc/ncommun)
for (i in 1:300){
seq1=(ncommun*(i-1)+1):(ncommun*i)
xmat[seq1,]=tmp
}
image(xmat)
xmat=cbind(1,xmat)
#parameters
b0=log(runif(ncommun,min=5,max=8))
betas.true=betas=rbind(b0,diag(1,ncommun))
#get means
media.true=media=exp(xmat%*%betas); range(media)
head(media)
#generate N_lk
par(mfrow=c(1,1),mar=rep(4,4))
nlk=matrix(NA,nloc,ncommun)
NBN=20 #when this is large, we get into areas with relatively flat loglikel, giving trouble to the slice sampler
for (i in 1:ncommun){
nlk[,i]=rnbinom(nloc,mu=media[,i],size=NBN)
}
nlk.true=nlk; boxplot(nlk)
soma=apply(nlk,1,sum); sum(soma==0)
theta.true=theta=nlk/soma; apply(theta,1,sum);
boxplot(theta); apply(theta,2,range); apply(theta>0.95,2,mean)
nl=apply(nlk,1,sum)
hist(nl)
sum(nl)
plot(media,nlk)
#generate phi:
#- assume that each species is strongly present in a single group
#- Avoid very rare species (species that are almost never present)
tmp=matrix(0.01,ncommun,nspp)
base=nspp/ncommun
margin1=floor(base*0.2)
seq1=c(seq(from=1,to=nspp,by=base),nspp-margin1)
for (i in 1:(length(seq1)-1)){ #add some zeroes
seq2=seq1[i]:(seq1[i+1]+margin1)
tmp[i,seq2]=1
}
phi=tmp/matrix(rowSums(tmp),ncommun,nspp) #re-scale to make sure it sums to 1
phi.true=phi
# round(phi[,1:20],2)
# table(round(phi,2))
unique(rowSums(phi))
phi.true=phi
image(phi)
phi.true[,1]
rm(list=ls(all=TRUE))
library(MCMCpack)
set.seed(201)
nloc=2000
nspp=200
ncommun=4
#design matrix
xmat=matrix(runif(nloc*ncommun,min=-1,max=3),nloc,ncommun)
#pure sites
tmp=matrix(-3,ncommun,ncommun)
diag(tmp)=2
num1=floor(nloc/ncommun)
for (i in 1:300){
seq1=(ncommun*(i-1)+1):(ncommun*i)
xmat[seq1,]=tmp
}
image(xmat)
xmat=cbind(1,xmat)
#parameters
b0=log(runif(ncommun,min=5,max=8))
betas.true=betas=rbind(b0,diag(1,ncommun))
#get means
media.true=media=exp(xmat%*%betas); range(media)
head(media)
#generate N_lk
par(mfrow=c(1,1),mar=rep(4,4))
nlk=matrix(NA,nloc,ncommun)
NBN=20 #when this is large, we get into areas with relatively flat loglikel, giving trouble to the slice sampler
for (i in 1:ncommun){
nlk[,i]=rnbinom(nloc,mu=media[,i],size=NBN)
}
nlk.true=nlk; boxplot(nlk)
soma=apply(nlk,1,sum); sum(soma==0)
theta.true=theta=nlk/soma; apply(theta,1,sum);
boxplot(theta); apply(theta,2,range); apply(theta>0.95,2,mean)
nl=apply(nlk,1,sum)
hist(nl)
sum(nl)
plot(media,nlk)
#generate phi:
#- assume that each species is strongly present in a single group
#- Avoid very rare species (species that are almost never present)
tmp=matrix(0.05,ncommun,nspp)
base=nspp/ncommun
margin1=floor(base*0.2)
seq1=c(seq(from=1,to=nspp,by=base),nspp-margin1)
for (i in 1:(length(seq1)-1)){ #add some zeroes
seq2=seq1[i]:(seq1[i+1]+margin1)
tmp[i,seq2]=1
}
phi=tmp/matrix(rowSums(tmp),ncommun,nspp) #re-scale to make sure it sums to 1
phi.true=phi
# round(phi[,1:20],2)
# table(round(phi,2))
unique(rowSums(phi))
phi.true=phi
image(phi)
phi[,3]
#generate actual observations y
array.lsk=array(0,dim=c(nloc,nspp,ncommun))
for (i in 1:nloc){
for (k in 1:ncommun){
array.lsk[i,,k]=rmultinom(1,size=nlk[i,k],prob=phi[k,])
}
}
array.lsk.true=array.lsk
y=apply(array.lsk,c(1,2),sum)
nks=t(apply(array.lsk,c(2,3),sum))
image(y)
phi.estim=nks/rowSums(nks)
rango=range(c(phi,phi.estim))
plot(phi,phi.estim,ylim=rango,xlim=rango)
lines(rango,rango,col='red')
#checking if it makes sense
plot(apply(array.lsk,c(1,3),sum),nlk)
lines(c(0,1000),c(0,1000))
#look at stuff to make sure it makes sense
phi.estim=nks/matrix(rowSums(nks),ncommun,nspp)
plot(phi.true,phi.estim)
nks.true=nks
#export results
setwd('U:\\GIT_models\\git_LDA_MS')
nome='fake data.csv'
colnames(y)=paste('spp',1:nspp,sep='')
rownames(y)=paste('loc',1:nloc,sep='')
write.csv(y,nome,row.names=F)
nome='fake data xmat.csv'
write.csv(xmat,nome,row.names=F)
rm(list=ls(all=TRUE))
library(MCMCpack)
library('Rcpp')
library('RcppArmadillo')
set.seed(33)
#get data
setwd('U:\\GIT_models\\git_LDA_MS')
dat=read.csv('fake data.csv',as.is=T)
y=data.matrix(dat)
#basic settings
ncomm.init=10
ngibbs=1000
nburn=ngibbs/2
#priors
psi=0.01
gamma=0.1
#----------------------------------------------------------
#run LDA no covariates to get initial values
#get functions
setwd('U:\\GIT_models\\git_LDA_abundance')
source('gibbs functions.R')
source('LDA.abundance main function.R')
sourceCpp('aux1.cpp')
res=LDA.abundance(y=y,ncomm=ncomm.init,ngibbs=ngibbs,nburn=nburn,psi=psi,gamma=gamma)
nloc=nrow(y)
nspp=ncol(y)
array.lsk.init=res$array.lsk
phi1=matrix(res$phi[nrow(res$phi),],ncomm.init,ncol(y))
#look at convergence
plot(res$llk,type='l')
#determine optimal number of groups
nlk=apply(array.lsk.init,c(1,3),sum)
theta1=nlk/apply(nlk,1,sum)
par(mfrow=c(1,1),mar=c(3,3,1,1))
boxplot(theta1)
ncomm=6
seq1=1:ncomm
sum(nlk[,seq1]/sum(nlk))
#re-distribute individuals within array.lsk.init that are in eliminated communities
array.lsk=array.lsk.init[,,seq1]
for (i in 1:nloc){
for (j in 1:nspp){
tmp=array.lsk.init[i,j,-seq1]
n=sum(tmp)
if (n>0){
prob=theta1[i,seq1]*phi1[seq1,j]
prob=prob/sum(prob)
z=rmultinom(1,size=n,prob=prob)
array.lsk[i,j,]=array.lsk[i,j,]+z
}
}
}
#export array.lsk
setwd('U:\\GIT_models\\git_LDA_MS')
dat1=matrix(array.lsk,nloc*nspp*ncomm,1)
write.csv(dat1,'array lsk.csv',row.names=F)
#export phi
tmp=matrix(1:(ncomm.init*nspp),ncomm.init,nspp)
ind1=tmp[-seq1,] #indicators for superfluous groups
write.csv(res$phi[,-ind1],'phi step1.csv',row.names=F)
nloc=nrow(y)
nspp=ncol(y)
array.lsk.init=res$array.lsk
phi1=matrix(res$phi[nrow(res$phi),],ncomm.init,ncol(y))
#look at convergence
plot(res$llk,type='l')
#determine optimal number of groups
nlk=apply(array.lsk.init,c(1,3),sum)
theta1=nlk/apply(nlk,1,sum)
par(mfrow=c(1,1),mar=c(3,3,1,1))
boxplot(theta1)
nloc=nrow(y)
nspp=ncol(y)
array.lsk.init=res$array.lsk
phi1=matrix(res$phi[nrow(res$phi),],ncomm.init,ncol(y))
#look at convergence
plot(res$llk,type='l')
plot(res$llk[seq1],type='l')
seq1=350:length(res$llk)
plot(res$llk[seq1],type='l')
nlk=apply(array.lsk.init,c(1,3),sum)
theta1=nlk/apply(nlk,1,sum)
par(mfrow=c(1,1),mar=c(3,3,1,1))
boxplot(theta1)
ncomm=4
seq1=1:ncomm
sum(nlk[,seq1]/sum(nlk))
array.lsk=array.lsk.init[,,seq1]
for (i in 1:nloc){
for (j in 1:nspp){
tmp=array.lsk.init[i,j,-seq1]
n=sum(tmp)
if (n>0){
prob=theta1[i,seq1]*phi1[seq1,j]
prob=prob/sum(prob)
z=rmultinom(1,size=n,prob=prob)
array.lsk[i,j,]=array.lsk[i,j,]+z
}
}
}
#export array.lsk
setwd('U:\\GIT_models\\git_LDA_MS')
dat1=matrix(array.lsk,nloc*nspp*ncomm,1)
write.csv(dat1,'array lsk.csv',row.names=F)
tmp=matrix(1:(ncomm.init*nspp),ncomm.init,nspp)
ind1=tmp[-seq1,] #indicators for superfluous groups
tmp=matrix(1:(ncomm.init*nspp),ncomm.init,nspp)
ind1=tmp[-seq1,] #indicators for superfluous groups
write.csv(res$phi[seq1,-ind1],'phi step1.csv',row.names=F)
seq.conv=350:length(res$llk)
plot(res$llk[seq.conv],type='l')
nlk=apply(array.lsk.init,c(1,3),sum)
theta1=nlk/apply(nlk,1,sum)
par(mfrow=c(1,1),mar=c(3,3,1,1))
boxplot(theta1)
ncomm=4
seq1=1:ncomm
sum(nlk[,seq1]/sum(nlk))
#re-distribute individuals within array.lsk.init that are in eliminated communities
array.lsk=array.lsk.init[,,seq1]
for (i in 1:nloc){
for (j in 1:nspp){
tmp=array.lsk.init[i,j,-seq1]
n=sum(tmp)
if (n>0){
prob=theta1[i,seq1]*phi1[seq1,j]
prob=prob/sum(prob)
z=rmultinom(1,size=n,prob=prob)
array.lsk[i,j,]=array.lsk[i,j,]+z
}
}
}
#export array.lsk
setwd('U:\\GIT_models\\git_LDA_MS')
dat1=matrix(array.lsk,nloc*nspp*ncomm,1)
write.csv(dat1,'array lsk.csv',row.names=F)
tmp=matrix(1:(ncomm.init*nspp),ncomm.init,nspp)
ind1=tmp[-seq1,] #indicators for superfluous groups
write.csv(res$phi[seq.conv,-ind1],'phi step1.csv',row.names=F)
dim(res$phi[seq.conv,-ind1])
rm(list=ls(all=TRUE))
library(MCMCpack)
library('Rcpp')
set.seed(10)
#get data
setwd('U:\\GIT_models\\git_LDA_MS')
dat=read.csv('fake data.csv',as.is=T)
xmat=data.matrix(read.csv('fake data xmat.csv',as.is=T))
# xmat=xmat[,1:2]
y=data.matrix(dat)
nloc=nrow(y)
nspp=ncol(y)
#get array.lsk
tmp=read.csv('array lsk.csv',as.is=T)
ncomm=length(tmp$V1)/(nspp*nloc); ncomm
array.lsk.init=array(tmp$V1,dim=c(nloc,nspp,ncomm))
phi.init=data.matrix(read.csv('phi step1.csv',as.is=T))
#basic settings
ngibbs=1000
nburn=ngibbs/2
#priors
phi.prior=0.01
var.betas=c(10,rep(10,ncol(xmat)-1))
gamma=0.1
#----------------------------------------------------------
#LDA with covariates
#get functions
setwd('U:\\GIT_models\\git_LDA_MS')
source('LDA cov main function.R')
source('LDA cov aux functions.R')
sourceCpp('LDA_cov_aux1_cpp.cpp')
sourceCpp('slice_betas.cpp')
sourceCpp('slice_NBN.cpp')
res=gibbs.LDA.cov(ncomm=ncomm,ngibbs=ngibbs,nburn=nburn,y=y,xmat=xmat,
phi.prior=phi.prior,array.lsk.init=array.lsk.init,
var.betas=var.betas,phi.init=phi.init)
library(MCMCpack)
set.seed(201)
nloc=2000
nspp=200
ncommun=4
#design matrix
xmat=matrix(runif(nloc*ncommun,min=-1,max=3),nloc,ncommun)
#pure sites
tmp=matrix(-3,ncommun,ncommun)
diag(tmp)=2
num1=floor(nloc/ncommun)
for (i in 1:300){
seq1=(ncommun*(i-1)+1):(ncommun*i)
xmat[seq1,]=tmp
}
image(xmat)
xmat=cbind(1,xmat)
#parameters
b0=log(runif(ncommun,min=5,max=8))
betas.true=betas=rbind(b0,diag(1,ncommun))
#get means
media.true=media=exp(xmat%*%betas); range(media)
head(media)
#generate N_lk
par(mfrow=c(1,1),mar=rep(4,4))
nlk=matrix(NA,nloc,ncommun)
NBN=20 #when this is large, we get into areas with relatively flat loglikel, giving trouble to the slice sampler
for (i in 1:ncommun){
nlk[,i]=rnbinom(nloc,mu=media[,i],size=NBN)
}
nlk.true=nlk; boxplot(nlk)
soma=apply(nlk,1,sum); sum(soma==0)
theta.true=theta=nlk/soma; apply(theta,1,sum);
boxplot(theta); apply(theta,2,range); apply(theta>0.95,2,mean)
nl=apply(nlk,1,sum)
hist(nl)
sum(nl)
plot(media,nlk)
#generate phi:
#- assume that each species is strongly present in a single group
#- Avoid very rare species (species that are almost never present)
tmp=matrix(0.05,ncommun,nspp)
base=nspp/ncommun
margin1=floor(base*0.2)
seq1=c(seq(from=1,to=nspp,by=base),nspp-margin1)
for (i in 1:(length(seq1)-1)){ #add some zeroes
seq2=seq1[i]:(seq1[i+1]+margin1)
tmp[i,seq2]=1
}
phi=tmp/matrix(rowSums(tmp),ncommun,nspp) #re-scale to make sure it sums to 1
phi.true=phi
# round(phi[,1:20],2)
# table(round(phi,2))
unique(rowSums(phi))
phi.true=phi
image(phi)
#generate actual observations y
array.lsk=array(0,dim=c(nloc,nspp,ncommun))
for (i in 1:nloc){
for (k in 1:ncommun){
array.lsk[i,,k]=rmultinom(1,size=nlk[i,k],prob=phi[k,])
}
}
array.lsk.true=array.lsk
y=apply(array.lsk,c(1,2),sum)
nks=t(apply(array.lsk,c(2,3),sum))
image(y)
phi.estim=nks/rowSums(nks)
rango=range(c(phi,phi.estim))
plot(phi,phi.estim,ylim=rango,xlim=rango)
lines(rango,rango,col='red')
#checking if it makes sense
plot(apply(array.lsk,c(1,3),sum),nlk)
lines(c(0,1000),c(0,1000))
#look at stuff to make sure it makes sense
phi.estim=nks/matrix(rowSums(nks),ncommun,nspp)
plot(phi.true,phi.estim)
nks.true=nks
library(MCMCpack)
library('coda')
plot(res$llk[1:ngibbs],type='l')
nburn=100
plot(res$llk[nburn:ngibbs],type='l')
#calculate effective sample size
effectiveSize(mcmc(res$betas[nburn:ngibbs,]))
plot(res$betas[nburn:ngibbs,1],type='l')
plot(res$NBN,type='l')
compare1=function(estim,true){
rango=range(c(true,estim))
plot(true,estim,ylim=rango,xlim=rango)
lines(rango,rango,col='red',lwd=2)
}
k=res$betas[ngibbs,]
nparam=ncol(xmat)
k1=matrix(k,nparam,ncomm); round(k1,2)
ordem=rep(NA,ncomm)
for (i in 2:nparam){
ordem[i-1]=which(k1[i,]==max(k1[i,]))
}
round(k1[,ordem],2)
image(k1[,ordem])
#look at nlk
par(mfrow=c(1,1))
tmp=matrix(res$nlk[ngibbs,],nloc,ncomm);
boxplot(tmp)
compare1(estim=jitter(tmp[,ordem]),true=jitter(nlk.true))
k=matrix(res$betas[ngibbs,],nparam,ncomm)
compare1(estim=k[,ordem],true=betas.true)
tmp=matrix(res$phi[ngibbs,],ncomm,nspp)
tmp1=tmp[ordem,]
compare1(estim=tmp1,true=phi.true)
nparam=ncol(xmat)
nloc=nrow(y)
nspp=ncol(y)
ntot=apply(y,1,sum)
#initial values
array.lsk=array.lsk.init
nlk=apply(array.lsk,c(1,3),sum)
betas=matrix(0,nparam,ncomm)
options(warn=-1) #sometimes I get "glm.fit: fitted rates numerically 0 occurred" here
for (i in 1:ncomm){
dat.tmp=cbind(nlk[,i],xmat[,-1])
colnames(dat.tmp)=rep('',ncol(dat.tmp)) #this is important otherwise next line breaks when we only have a single covariate
colnames(dat.tmp)[1]='y'
dat.tmp1=as.data.frame(dat.tmp)
res=try(glm.nb(y ~ ., data = dat.tmp1))
#if we run into an error using NB regression, use Poisson reg
ind=grep('Error',res)
if (length(ind)>0) res=glm(y~.,data=dat.tmp1,family='poisson')
betas[,i]=res$coef
}
#basic settings
nparam=ncol(xmat)
nloc=nrow(y)
nspp=ncol(y)
ntot=apply(y,1,sum)
#initial values
array.lsk=array.lsk.init
nlk=apply(array.lsk,c(1,3),sum)
betas=matrix(0,nparam,ncomm)
options(warn=-1) #sometimes I get "glm.fit: fitted rates numerically 0 occurred" here
for (i in 1:ncomm){
dat.tmp=cbind(nlk[,i],xmat[,-1])
colnames(dat.tmp)=rep('',ncol(dat.tmp)) #this is important otherwise next line breaks when we only have a single covariate
colnames(dat.tmp)[1]='y'
dat.tmp1=as.data.frame(dat.tmp)
res=try(glm.nb(y ~ ., data = dat.tmp1))
#if we run into an error using NB regression, use Poisson reg
ind=grep('Error',res)
if (length(ind)>0) res=glm(y~.,data=dat.tmp1,family='poisson')
betas[,i]=res$coef
}
