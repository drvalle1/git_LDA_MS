xmat=data.matrix(read.csv('fake data cov.csv',as.is=T))
#run gibbs sampler
ncomm=10
ngibbs=1000
nburnin=ngibbs/2
res=LDA.MS.gibbs(y=y,xmat=xmat,ncomm=ncomm,ngibbs=ngibbs,nburnin=nburnin,phi.prior=0.1)
rm(list=ls(all=TRUE))
#get results Mixture
setwd('U:\\independent studies\\tsbp\\mixture model\\aic\\derived results')
mix.aic=read.csv('aic bic results.csv',as.is=T)
mix.tsbp=read.csv('summary tsbp results.csv',as.is=T)
colnames(mix.tsbp)=c('true.gr','tsbp.ngr','time.tsbp')
mix=merge(mix.aic,mix.tsbp,all=T); dim(mix.aic); dim(mix)
mix$dif.aic=abs(mix$aic-mix$true.gr)
mix$dif.bic=abs(mix$bic-mix$true.gr)
mix$dif.tsbp=abs(mix$tsbp.ngr-mix$true.gr)
#make graph for mixture groups
png('mixture graph groups.png',width=700,height=700)
cores=c('red','orange','grey')
barplot(t(data.matrix(mix[,c('dif.aic','dif.bic','dif.tsbp')])),beside=T,
names.arg=mix$true.gr,col=cores,ylab='',cex.names=2,cex.axis=2)
abline(h=1:6,col='grey',lty=3)
barplot(t(data.matrix(mix[,c('dif.aic','dif.bic','dif.tsbp')])),beside=T,
names.arg=mix$true.gr,
col=cores,ylab='',add=T,cex.names=2,cex.axis=2)
legend(x=1,y=6,fill=cores,c('AIC','BIC','TSB'),bg='white',cex=3)
dev.off()
#make graph for mixture time
png('mixture graph time.png',width=700,height=700)
barplot(t(data.matrix(mix[,c('time.hour','time.tsbp')])),beside=T,
names.arg=mix$true.gr,
col=c('red','white'),cex.names=2,cex.axis=2)
abline(h=seq(from=10,to=60,by=10),col='grey',lty=3)
barplot(t(data.matrix(mix[,c('time.hour','time.tsbp')])),beside=T,
names.arg=mix$true.gr,
col=c('red','white'),add=T,cex.names=2,cex.axis=2)
dev.off()
cores=c('red','grey')
png('mixture graph time.png',width=700,height=700)
barplot(t(data.matrix(mix[,c('time.hour','time.tsbp')])),beside=T,
names.arg=mix$true.gr,col=cores,cex.names=2,cex.axis=2)
abline(h=seq(from=10,to=60,by=10),col='grey',lty=3)
barplot(t(data.matrix(mix[,c('time.hour','time.tsbp')])),beside=T,
names.arg=mix$true.gr,col=cores,add=T,cex.names=2,cex.axis=2)
dev.off()
rm(list=ls(all=TRUE))
#get results SBM
setwd('U:\\independent studies\\tsbp\\stochastic block model\\aic\\derived results')
sbm.aic=read.csv('aic bic results.csv',as.is=T)
sbm.tsbp=read.csv('summary tsbp results.csv',as.is=T)
colnames(sbm.tsbp)=c('true.gr','tsbp.ngr.loc','tsbp.ngr.spp','time.tsbp')
sbm=merge(sbm.aic,sbm.tsbp,all=T); dim(sbm.aic); dim(sbm)
sbm$tsbp.ngr=apply(sbm[,c('tsbp.ngr.loc','tsbp.ngr.spp')],1,mean)
sbm$dif.aic=abs(sbm$aic-sbm$true.gr)
sbm$dif.bic=abs(sbm$bic-sbm$true.gr)
sbm$dif.tsbp=abs(sbm$tsbp.ngr-sbm$true.gr)
#make graph for mixture groups
png('sbm graph groups.png',width=700,height=700)
cores=c('red','orange','grey')
barplot(t(data.matrix(sbm[,c('dif.aic','dif.bic','dif.tsbp')])),beside=T,
names.arg=sbm$true.gr,col=cores,ylab='',cex.names=2,cex.axis=2)
abline(h=seq(from=2,to=12,by=2),col='grey',lty=3)
barplot(t(data.matrix(sbm[,c('dif.aic','dif.bic','dif.tsbp')])),beside=T,
names.arg=sbm$true.gr,
col=cores,ylab='',add=T,cex.names=2,cex.axis=2)
dev.off()
#make graph for mixture time
cores=c('red','grey')
png('sbm graph time.png',width=700,height=700)
barplot(t(data.matrix(sbm[,c('time.hour','time.tsbp')])),beside=T,
names.arg=sbm$true.gr,col=cores,cex.names=2,cex.axis=2)
abline(h=seq(from=5,to=15,by=5),col='grey',lty=3)
barplot(t(data.matrix(sbm[,c('time.hour','time.tsbp')])),beside=T,
names.arg=sbm$true.gr,col=cores,add=T,cex.names=2,cex.axis=2)
dev.off()
rm(list=ls(all=TRUE))
#get results SAM
setwd('U:\\independent studies\\tsbp\\clustering response curves gamma\\aic\\derived results')
sam.aic=read.csv('aic bic results.csv',as.is=T)
sam.tsbp=read.csv('summary tsbp results.csv',as.is=T)
colnames(sam.tsbp)=c('true.gr','tsbp.ngr','time.tsbp')
sam=merge(sam.aic,sam.tsbp,all=T); dim(sam.aic); dim(sam)
sam$dif.aic=abs(sam$aic-sam$true.gr)
sam$dif.bic=abs(sam$bic-sam$true.gr)
sam$dif.tsbp=abs(sam$tsbp.ngr-sam$true.gr)
#make graph for mixture groups
png('sam graph groups.png',width=700,height=700)
cores=c('red','orange','grey')
barplot(t(data.matrix(sam[,c('dif.aic','dif.bic','dif.tsbp')])),beside=T,
names.arg=sam$true.gr,col=cores,ylab='',cex.names=2,cex.axis=2)
abline(h=1:7,col='grey',lty=3)
barplot(t(data.matrix(sam[,c('dif.aic','dif.bic','dif.tsbp')])),beside=T,
names.arg=sam$true.gr,
col=cores,ylab='',add=T,cex.names=2,cex.axis=2)
dev.off()
#make graph for mixture time
cores=c('red','grey')
png('sam graph time.png',width=700,height=700)
barplot(t(data.matrix(sam[,c('time.hour','time.tsbp')])),beside=T,
names.arg=sam$true.gr,col=cores,cex.names=2,cex.axis=2)
abline(h=seq(from=5,to=15,by=5),col='grey',lty=3)
barplot(t(data.matrix(sam[,c('time.hour','time.tsbp')])),beside=T,
names.arg=sam$true.gr,col=cores,add=T,cex.names=2,cex.axis=2)
dev.off()
rm(list=ls(all=TRUE))
setwd('U:\\independent studies\\tsbp\\mixture model\\real data results')
phi=read.csv('phi mean.csv',as.is=T)
cluster.assign=read.csv('z mode.csv',as.is=T)$x
ngroup=max(cluster.assign)
#order data table accordingly
setwd('U:\\independent studies\\tsbp\\BBS data')
dat=read.csv('BBS data.csv',as.is=T)
ind=which(colnames(dat)%in%c('countrynum','statenum','route'))
dat1=dat[,-ind]; colnames(dat1)
nspp=ncol(dat1)
nloc=nrow(dat1)
#let's re-order species according to the most dominant species in each group
#(i.e., those with prob>0.5)
phi1=phi[1:ngroup,]
hist(data.matrix(phi1))
ind=numeric()
for (i in 1:ngroup){
tmp=which(phi1[i,]>0.5)
if (i==1) tmp=ind
if (i!=1) {
cond=!(tmp%in%ind) #just species that have not been selected yet
tmp1=tmp[cond]
ind=c(ind,tmp1)
}
}
length(ind)
#get all the remaining spp
tmp=1:nspp
cond=!(tmp%in%ind)
tmp1=tmp[cond]
ind=c(ind,tmp1)
#finally re-order spp
dat2=dat1[,ind]
dat2$cluster=as.numeric(cluster.assign)
dat3=dat2[order(dat2$cluster),]
#where do clusters change?
cchange=numeric()
clust=1
for (i in 1:nrow(dat3)){
if (dat3$cluster[i]!=clust) {
clust=clust+1
cchange=c(cchange,i)
}
}
#get midpoints for cluster change
tmp=c(1,cchange)
mid=rep(NA,length(tmp)-1)
for (i in 1:length(mid)){
mid[i]=mean(tmp[i:(i+1)])
}
library('lattice')
setwd('U:\\independent studies\\tsbp\\mixture model\\real data results')
ind=which(colnames(dat3)=='cluster')
plot1 = levelplot(t(data.matrix(dat3[,-ind])),at=c(0,0.5,1),col.regions=c('cyan','red','purple'),
scales=list(x=list(draw=FALSE),
y=list(draw=T,at=mid,labels=unique(dat3$cluster),cex=1.5)),
xlab=list(cex=2,label='Species'),ylab=list(cex=2,label='Locations'),
colorkey=FALSE,aspect='xy',
main=list(cex=2.5,label='Ordered data'),
panel = function(...){
panel.levelplot(...)
panel.abline(h = cchange, lwd = 3, col = "white")})
plot1
plot1 = levelplot(t(data.matrix(dat3[,-ind])),at=c(0,0.5,1),col.regions=c('cyan','red','purple'),
colorkey=T,aspect='xy')
plot1
dim(dat3)
head(dat3)
plot1 = levelplot(t(data.matrix(dat3[1:5,1:5])),at=c(0,0.5,1),col.regions=c('cyan','red','purple'),
colorkey=T,aspect='xy')
plot1
?levelplot
plot1 = levelplot(t(data.matrix(dat3[1:5,1:5])),at=c(0,0.5,1),col.regions=c('cyan','red','purple'),
colorkey=T,aspect='xy',
labels=list(at=c(0.25,0.75),labels=c(0,1)))
plot1
plot1 = levelplot(t(data.matrix(dat3[1:5,1:5])),at=c(0,0.5,1),col.regions=c('cyan','red','purple'),
colorkey=list(at=c(0.25,0.75),labels=c(0,1)),aspect='xy')
plot1
plot1 = levelplot(t(data.matrix(dat3[1:5,1:5])),at=c(0,0.5,1),col.regions=c('cyan','red','purple'),
colorkey=list(labels=c(0,1)),aspect='xy')
plot1
plot1 = levelplot(t(data.matrix(dat3[1:5,1:5])),at=c(0,0.5,1),col.regions=c('cyan','red','purple'),
colorkey=T,aspect='xy')
plot1
plot1 = levelplot(t(data.matrix(dat3[1:5,1:5])),at=c(0,1),col.regions=c('cyan','purple'),
colorkey=T,aspect='xy')
plot1
plot1 = levelplot(t(data.matrix(dat3[1:5,1:5])),at=0.5,col.regions=c('cyan','purple'),
colorkey=T,aspect='xy')
plot1
plot1 = levelplot(t(data.matrix(dat3[1:5,1:5])),at=c(0,0.5,1),col.regions=c('cyan','purple'),
colorkey=T,aspect='xy')
plot1
plot1 = levelplot(t(data.matrix(dat3[1:5,1:5])),at=c(0,0.5,1),col.regions=c('cyan','purple'),
colorkey=list(space='right',at=c(0,0.5,1)),aspect='xy')
plot1
plot1 = levelplot(t(data.matrix(dat3[1:5,1:5])),at=c(0,0.5,1),col.regions=c('cyan','purple'),
colorkey=list(space='right',at=c(0,0.5,1),labels=list(labels=c(0,1))),aspect='xy')
plot1
plot1 = levelplot(t(data.matrix(dat3[1:5,1:5])),at=c(0,0.5,1),col.regions=c('cyan','purple'),
colorkey=list(space='right',at=c(0,0.5,1),labels=list(labels=c(0,1)),tick.number=3),aspect='xy')
plot1
plot1 = levelplot(t(data.matrix(dat3[1:5,1:5])),at=c(0,0.5,1),col.regions=c('cyan','purple'),
colorkey=list(space='right',at=c(0,0.5,1),labels=list(labels=c(0,1)),tick.number=2),aspect='xy')
plot1
plot1 = levelplot(t(data.matrix(dat3[1:5,1:5])),at=c(0,0.5,1),col.regions=c('cyan','purple'))
plot1
tmp=matrix(c(1,0),2,1)
plot1 = levelplot(t(data.matrix(tmp)),at=c(0,0.5,1),col.regions=c('cyan','purple'))
plot1
tmp=matrix(c(0,1),2,1)
plot1 = levelplot(t(data.matrix(tmp)),at=c(0,0.5,1),col.regions=c('cyan','purple'))
plot1
t(data.matrix(tmp))
ind=which(colnames(dat2)=='cluster')
plot1 = levelplot(t(data.matrix(dat2[1:3,1:3])),at=c(0,0.5,1),col.regions=c('cyan','red','purple'),
scales=list(x=list(draw=FALSE),y=list(draw=FALSE)),
xlab=list(cex=2,label='Species'),ylab=list(cex=2,label='Locations'),
colorkey=FALSE,aspect='xy',
main=list(cex=2.5,label='Original data'))
plot1
data.matrix(dat2[1:3,1:3])
t(data.matrix(dat2[1:3,1:3]))
data.matrix(dat2[1:3,1:3])
tmp=matrix(c(0,1),2,1)
plot1 = levelplot(t(data.matrix(tmp)),at=c(0,0.5,1),col.regions=c('cyan','purple'))
tmp=matrix(c(0,1),2,1)
plot1 = levelplot(t(data.matrix(tmp)),at=c(0,0.5,1),col.regions=c('cyan','purple'))
plot1
tmp=matrix(c(0,1),2,1)
plot1 = levelplot(t(data.matrix(tmp)),at=c(0,0.5,1),col.regions=c('cyan','purple'),
colorkey=FALSE)
plot1
tmp=matrix(c(0,1),2,1)
plot1 = levelplot(t(data.matrix(tmp)),at=c(0,0.5,1),col.regions=c('cyan','purple'),
colorkey=FALSE,xlab=list(label=''),ylab=list(label=''))
plot1
?levelplot
tmp=matrix(c(0,1),2,1)
plot1 = levelplot(t(data.matrix(tmp)),at=c(0,0.5,1),col.regions=c('cyan','purple'),
colorkey=FALSE,xlab=list(label=''),ylab=list(label=''),
scales=list(x=list(draw=FALSE),
y=list(draw=FALSE)))
plot1
tmp=matrix(c(0,1),2,1)
plot1 = levelplot(t(data.matrix(tmp)),at=c(0,0.5,1),col.regions=c('cyan','purple'),
colorkey=FALSE,xlab=list(label=''),ylab=list(label=''),
scales=list(x=list(draw=FALSE),
y=list(draw=T,at=c(0.25,0.75),labels=c(0,1))))
plot1
tmp=matrix(c(0,1),2,1)
plot1 = levelplot(t(data.matrix(tmp)),at=c(0,0.5,1),col.regions=c('cyan','purple'),
colorkey=FALSE,xlab=list(label=''),ylab=list(label=''),
scales=list(x=list(draw=FALSE),
y=list(draw=T,at=c(1,2),labels=c(0,1))))
plot1
?scales
?panel
tmp=matrix(c(0,1),2,1)
plot1 = levelplot(t(data.matrix(tmp)),at=c(0,0.5,1),col.regions=c('cyan','purple'),
colorkey=FALSE,xlab=list(label=''),ylab=list(label=''),
scales=list(x=list(draw=FALSE),
y=list(draw=T,at=c(1,2),labels=c(0,1)),alternating=F))
plot1
tmp=matrix(c(0,1),2,1)
plot1 = levelplot(t(data.matrix(tmp)),at=c(0,0.5,1),col.regions=c('cyan','purple'),
colorkey=FALSE,xlab=list(label=''),ylab=list(label=''),
scales=list(x=list(draw=FALSE),
y=list(draw=T,at=c(1,2),labels=c(0,1)),alternating=F,cex=2))
plot1
tmp=matrix(c(0,1),2,1)
plot1 = levelplot(t(data.matrix(tmp)),at=c(0,0.5,1),col.regions=c('cyan','purple'),
colorkey=FALSE,xlab=list(label=''),ylab=list(label=''),
scales=list(x=list(draw=FALSE),
y=list(draw=T,at=c(1,2),labels=c(0,1)),alternating=F,cex=4))
plot1
plot1 = levelplot(t(data.matrix(dat2[1:3,1:3)),at=c(0,0.5,1),col.regions=c('cyan','red','purple'))
plot1
plot1 = levelplot(t(data.matrix(dat2[1:3,1:3)),at=c(0,0.5,1),col.regions=c('cyan','red','purple'))
plot1
plot1 = levelplot(t(data.matrix(dat2[1:3,1:3])),at=c(0,0.5,1),col.regions=c('cyan','red','purple'))
plot1
dat2[1:3,1:3]
tmp=matrix(c(0,1),2,1)
plot1 = levelplot(t(data.matrix(tmp)),at=c(0,0.5,1),col.regions=c('cyan','purple'),
colorkey=FALSE,xlab=list(label=''),ylab=list(label=''),
scales=list(x=list(draw=FALSE),
y=list(draw=T,at=c(1,2),labels=c(0,1)),alternating=F,cex=4))
plot1
set.seed(5)
library(ggplot2)
library('foreign')
library(sp)
library(maptools)
library('maps')
library('gstat')
library(gridExtra)
library('raster')
install.packages(c('ggplot2','sp','maptools','maps','gstat','gridExtra','raster'))
rm(list=ls(all=TRUE))
#get modeling results
setwd('U:\\independent studies\\tsbp\\mixture model\\real data results')
z=read.csv('z.csv',as.is=T)
ngroup=max(z)
nloc=ncol(z)
#find the proportion of times a location was assigned to each group
theta=matrix(NA,nloc,ngroup)
for (i in 1:nloc){
fim=rep(0,ngroup)
tmp=table(z[,i])
ind=as.numeric(names(tmp))
fim[ind]=tmp/sum(tmp)
theta[i,]=fim
}
hist(theta)
table(theta)
#------------------------------------------
#get spatial coordinates
setwd('U:\\independent studies\\tsbp\\BBS data')
routes=read.csv('routes BBS.csv',as.is=T)
ind=which(colnames(routes)=='Route')
colnames(routes)[ind]='route'
dat=read.csv('BBS data.csv',as.is=T)
dat$id=1:nrow(dat)
routes1=merge(routes,dat[,c("countrynum","statenum","route",'id')],all.y=T); dim(dat);dim(routes1)
routes2=routes1[order(routes1$id),]
theta1=as.data.frame(theta)
colnames(theta1)=paste0('gr',1:16)
theta1$Latitude=routes2$Latitude
theta1$Longitude=routes2$Longitude
#------------------------------------------
#create maps
set.seed(5)
library(ggplot2)
library('foreign')
library(sp)
library(maptools)
library('maps')
library('gstat')
library(gridExtra)
library('raster')
setwd('U:\\independent studies\\tsbp\\GIS')
grd=read.dbf('fishnet1.dbf',as.is=T)[,c('POINT_X','POINT_Y')] #got this from 'U:\\presence absence model\\GIS\\USA_adm_shp'
plot(grd$POINT_X,grd$POINT_Y)
us <- readRDS("gadm36_USA_1_sp.rds")
canada <- readRDS("gadm36_CAN_1_sp.rds")
#------------------------------------------------------------------
#To avoid wild extrapolation, just keep grid points within 1 degree of sampled point
dthresh=1
grd1=data.frame(x=grd$POINT_X,y=grd$POINT_Y,keep=0)
for (i in 1:nrow(grd1)){
x2=(grd1$x[i]-theta1$Longitude)^2
y2=(grd1$y[i]-theta1$Latitude)^2
dist=sqrt(x2+y2)
cond=dist<dthresh
if (sum(cond)>0) grd1$keep[i]=1
}
grd2=grd1[grd1$keep==1,]
plot(y~x,data=grd1)
points(y~x,data=grd2,col='red')
#----------------------------------------------
coordinates(grd2) = ~x + y
gridded(grd2) <- TRUE
setwd('U:\\independent studies\\tsbp\\mixture model\\real data results\\interpolated maps')
rm(list=ls(all=TRUE))
library('mvtnorm')
library('Rcpp')
library('MCMCpack')
set.seed(4)
#get data
setwd('U:\\GIT_models\\git_LDA_MS')
dat=read.csv('fake data.csv',as.is=T)
ind=which(colnames(dat)=='X')
y=data.matrix(dat[,-ind]); dim(y)
#get functions
setwd('U:\\GIT_models\\git_LDA_MS')
source('LDA MS functions.R')
source('LDA MS gibbs sampler.R')
sourceCpp('LDA_MS_c.cpp')
#get data
setwd('U:\\GIT_models\\git_LDA_MS')
xmat=data.matrix(read.csv('fake data cov.csv',as.is=T))
#run gibbs sampler
ncomm=10
ngibbs=1000
nburnin=ngibbs/2
res=LDA.MS.gibbs(y=y,xmat=xmat,ncomm=ncomm,ngibbs=ngibbs,nburnin=nburnin,phi.prior=0.1)
library('Rcpp')
set.seed(4)
setwd('U:\\GIT_models\\git_LDA_MS')
sourceCpp('LDA_MS_c.cpp')
nloc=1000
nspp=300
ncommun=9
#generate covariates
dist=nloc/(ncommun+1)
init=1
xmat=numeric()
for (i in 1:(ncommun-1)){
if (i!=1) init=init+dist
fim=init+2*dist
med=init+dist
tmp=rep(0,nloc)
tmp[init:(fim-1)]=c(seq(from=0,to=2,length.out=dist),seq(from=2,to=0,length.out=dist))
xmat=cbind(xmat,tmp)
}
xmat=cbind(1,xmat)*2
colnames(xmat)=paste('cov',0:(ncommun-1),sep='')
#look at xmat
plot(NA,NA,ylim=range(xmat),xlim=c(1,nloc),main='covariates')
for (i in 2:ncol(xmat)) lines(1:nloc,xmat[,i],col=i)
#generate betas
betas=matrix(NA,ncol(xmat),ncommun-1)
betas[1,]=-1
betas[-1,]=diag(1,ncol(xmat)-1)
betas=betas*3
betas.true=betas
#generate probs
sig2=sig2.true=0.1
probs=delta=matrix(NA,nloc,ncommun-1)
for (i in 1:(ncommun-1)){
media=xmat%*%betas[,i]
tmp=rnorm(nloc,mean=media,sd=sqrt(sig2))
tmp[tmp>5]=5; tmp[tmp< -5]=-5
delta[,i]=tmp
probs[,i]=1/(1+exp(-delta[,i]))
}
probs.true=probs
range(probs)
#generate thetas
vmat=cbind(probs,1)
theta.true=theta=convertVtoTheta(vmat,rep(1,nloc))
#this is important: it determines if the model will be able to disentagle these groups
boxplot(theta,ylim=c(0,1))
#create true curves
plot(NA,NA,ylim=c(0,1),xlim=c(0,nloc))
for (i in 1:ncommun){
lines(theta[,i],col=i)
}
apply(theta,2,max)
#generate phi
tmp=matrix(rnorm(ncommun*nspp,mean=0,sd=2),ncommun,nspp)
tmp[tmp<0.1]=0.1
tmp[,1:(2*ncommun)]=cbind(diag(8,ncommun),diag(8,ncommun))
phi=tmp/matrix(rowSums(tmp),ncommun,nspp)
round(phi[,1:20],2)
table(round(phi,2))
unique(rowSums(phi))
phi.true=phi
#generate actual observations y
nl=floor(runif(nloc,min=100,max=400))
nlk=matrix(NA,nloc,ncommun)
nks=matrix(0,ncommun,nspp)
y=matrix(NA,nloc,nspp)
for (i in 1:nloc){
nlk[i,]=rmultinom(1,size=nl[i],prob=theta[i,])
tmp1=rep(0,nspp)
for (k in 1:ncommun){
tmp=rmultinom(1,size=nlk[i,k],prob=phi[k,])
nks[k,]=nks[k,]+tmp
tmp1=tmp1+tmp
}
y[i,]=tmp1
}
image(y)
#look at stuff to make sure it makes sense
theta.estim=nlk/matrix(nl,nloc,ncommun)
plot(NA,NA,xlim=c(1,nloc),ylim=c(0,1))
for (i in 1:ncommun) lines(1:nloc,theta.estim[,i],col=i)
nlk.true=nlk
phi.estim=nks/matrix(rowSums(nks),ncommun,nspp,)
plot(phi.true,phi.estim)
nks.true=nks
plot(res$llk,type='l',ylim=range(res$llk,na.rm=T))
#look at theta
nloc=nrow(y)
theta=matrix(res$theta[nrow(res$theta),],nloc,ncomm)
boxplot(theta)
true.ncomm=9
res1=matrix(NA,true.ncomm,ncomm)
for (i in 1:true.ncomm){
for (j in 1:ncomm){
res1[i,j]=cor(cbind(theta.true[,i],theta[,j]))[2,1]
}
}
ind=numeric()
for (i in 1:true.ncomm) ind=c(ind,which(res1[i,]==max(res1[i,])))
theta1=theta[,ind]
plot(theta.true,theta1)
rango=c(0,1)
plot(NA,NA,xlim=c(0,nrow(theta.true)),ylim=rango)
seq1=1:nrow(theta.true)
for (i in 1:true.ncomm) {
lines(seq1,theta.true[,i],col=i)
lines(seq1,theta1[,i],col=i,lty=2,lwd=2)
}
#look at convergence
plot(res$llk,type='l',ylim=range(res$llk,na.rm=T))
#look at theta
nloc=nrow(y)
theta=matrix(res$theta[nrow(res$theta),],nloc,ncomm)
boxplot(theta)
Sys.getenv("PATH")
paste(Sys.getenv("PATH"), "C:\\Users\\drvalle\\AppData\\Local\\Programs\\MiKTeX 2.9\\miktex\\bin", sep=.Platform$path.sep)
.Platform$path.sep
Sys.setenv(PATH = paste(Sys.getenv("PATH"), "C:\\Users\\drvalle\\AppData\\Local\\Programs\\MiKTeX 2.9\\miktex\\bin", sep=.Platform$path.sep))
