func1=function(x){
dmvnorm(x=x,mean=rep(0,n),sigma=cov)
}
func2=function(x){
dmvnorm(x=x,mean=rep(0,n),sigma=R)
}
#say that y1=1,y2=0,y3=1
lo=c(0,-Inf,0)
hi=c(Inf,0,Inf)
cubature::pcubature(f = func1,
lowerLimit = lo,
upperLimit = hi)
#0.0479792
cubature::pcubature(f = func2,
lowerLimit = lo,
upperLimit = hi)
#0.04797921
lo=c(0,-Inf,-Inf)
hi=c(Inf,0,0)
cubature::pcubature(f = func1,
lowerLimit = lo,
upperLimit = hi)
#0.0479792
cubature::pcubature(f = func2,
lowerLimit = lo,
upperLimit = hi)
#0.04797921
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(4)
setwd('U:\\GIT_models\\git_LDA_MS')
sourceCpp('aux1.cpp')
nloc=1000
nspp=100
ncommun=4
#generate covariates
tmp1=c(seq(from=2,to=0,length.out=nloc/2),rep(0,nloc*1/2))
tmp2=c(rep(0,nloc/8),seq(from=0,to=2,length.out=nloc/8),seq(from=2,to=0,length.out=nloc/8),rep(0,nloc*5/8))
tmp3=c(rep(0,nloc/4),seq(from=0,to=2,length.out=nloc/8),seq(from=2,to=0,length.out=nloc/8),rep(0,nloc*4/8))
xmat=cbind(1,tmp1,tmp2,tmp3)
colnames(xmat)=paste('cov',0:(ncommun-1),sep='')
#look at xmat
plot(NA,NA,ylim=range(xmat),xlim=c(1,nloc))
for (i in 1:ncol(xmat)) lines(1:nloc,xmat[,i],col=i)
#generate betas
betas=matrix(NA,ncol(xmat),ncommun-1)
betas[1,]=c(1,1,2)
seq1=c(2,3,2)
betas[2:4,]=diag(seq1,ncommun-1)
betas[betas==0]=-3
betas.true=betas
#generate probs
probs=matrix(NA,nloc,ncommun-1)
for (i in 1:(ncommun-1)){
media=xmat%*%betas[,i]
probs[,i]=1/(1+exp(-media))
}
probs.true=probs
range(probs)
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(4)
setwd('U:\\GIT_models\\git_LDA_MS')
sourceCpp('aux1.cpp')
nloc=1000
nspp=100
ncommun=4
#generate covariates
tmp1=c(seq(from=2,to=0,length.out=nloc/2),rep(0,nloc*1/2))
tmp2=c(rep(0,nloc/8),seq(from=0,to=2,length.out=nloc/8),seq(from=2,to=0,length.out=nloc/8),rep(0,nloc*5/8))
tmp3=c(rep(0,nloc/4),seq(from=0,to=2,length.out=nloc/8),seq(from=2,to=0,length.out=nloc/8),rep(0,nloc*4/8))
xmat=cbind(1,tmp1,tmp2,tmp3)
colnames(xmat)=paste('cov',0:(ncommun-1),sep='')
#look at xmat
plot(NA,NA,ylim=range(xmat),xlim=c(1,nloc),main='covariates')
for (i in 1:ncol(xmat)) lines(1:nloc,xmat[,i],col=i)
#generate betas
betas=matrix(NA,ncol(xmat),ncommun-1)
betas[1,]=c(1,1,2)
seq1=c(2,3,2)
betas[2:4,]=diag(seq1,ncommun-1)
betas[betas==0]=-3
betas.true=betas
#generate probs
probs=matrix(NA,nloc,ncommun-1)
for (i in 1:(ncommun-1)){
media=xmat%*%betas[,i]
probs[,i]=1/(1+exp(-media))
}
probs.true=probs
range(probs)
#generate thetas
prob=1/(1+exp(-delta))
vmat=cbind(prob,1)
theta.true=theta=convertVtoTheta(vmat,rep(1,nloc))
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(4)
setwd('U:\\GIT_models\\git_LDA_MS')
sourceCpp('aux1.cpp')
nloc=1000
nspp=100
ncommun=4
#generate covariates
tmp1=c(seq(from=2,to=0,length.out=nloc/2),rep(0,nloc*1/2))
tmp2=c(rep(0,nloc/8),seq(from=0,to=2,length.out=nloc/8),seq(from=2,to=0,length.out=nloc/8),rep(0,nloc*5/8))
tmp3=c(rep(0,nloc/4),seq(from=0,to=2,length.out=nloc/8),seq(from=2,to=0,length.out=nloc/8),rep(0,nloc*4/8))
xmat=cbind(1,tmp1,tmp2,tmp3)
colnames(xmat)=paste('cov',0:(ncommun-1),sep='')
#look at xmat
plot(NA,NA,ylim=range(xmat),xlim=c(1,nloc),main='covariates')
for (i in 1:ncol(xmat)) lines(1:nloc,xmat[,i],col=i)
#generate betas
betas=matrix(NA,ncol(xmat),ncommun-1)
betas[1,]=c(1,1,2)
seq1=c(2,3,2)
betas[2:4,]=diag(seq1,ncommun-1)
betas[betas==0]=-3
betas.true=betas
#generate probs
probs=matrix(NA,nloc,ncommun-1)
for (i in 1:(ncommun-1)){
media=xmat%*%betas[,i]
probs[,i]=1/(1+exp(-media))
}
probs.true=probs
range(probs)
#generate thetas
vmat=cbind(prob1,1)
theta.true=theta=convertVtoTheta(vmat,rep(1,nloc))
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(4)
setwd('U:\\GIT_models\\git_LDA_MS')
sourceCpp('aux1.cpp')
nloc=1000
nspp=100
ncommun=4
#generate covariates
tmp1=c(seq(from=2,to=0,length.out=nloc/2),rep(0,nloc*1/2))
tmp2=c(rep(0,nloc/8),seq(from=0,to=2,length.out=nloc/8),seq(from=2,to=0,length.out=nloc/8),rep(0,nloc*5/8))
tmp3=c(rep(0,nloc/4),seq(from=0,to=2,length.out=nloc/8),seq(from=2,to=0,length.out=nloc/8),rep(0,nloc*4/8))
xmat=cbind(1,tmp1,tmp2,tmp3)
colnames(xmat)=paste('cov',0:(ncommun-1),sep='')
#look at xmat
plot(NA,NA,ylim=range(xmat),xlim=c(1,nloc),main='covariates')
for (i in 1:ncol(xmat)) lines(1:nloc,xmat[,i],col=i)
#generate betas
betas=matrix(NA,ncol(xmat),ncommun-1)
betas[1,]=c(1,1,2)
seq1=c(2,3,2)
betas[2:4,]=diag(seq1,ncommun-1)
betas[betas==0]=-3
betas.true=betas
#generate probs
probs=matrix(NA,nloc,ncommun-1)
for (i in 1:(ncommun-1)){
media=xmat%*%betas[,i]
probs[,i]=1/(1+exp(-media))
}
probs.true=probs
range(probs)
#generate thetas
vmat=cbind(probs,1)
theta.true=theta=convertVtoTheta(vmat,rep(1,nloc))
#this is important: it determines if the model will be able to disentagle these groups
boxplot(theta,ylim=c(0,1))
nloc
plot(NA,NA,ylim=c(0,1),xlim=c(0,nloc))
for (i in 1:(ncommun-1)){
lines(theta[,i],col=i)
}
head(theta.true)
plot(NA,NA,ylim=c(0,1),xlim=c(0,nloc))
for (i in 1:ncommun){
lines(theta[,i],col=i)
}
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(4)
setwd('U:\\GIT_models\\git_LDA_MS')
sourceCpp('aux1.cpp')
nloc=1000
nspp=100
ncommun=4
#generate covariates
tmp1=c(seq(from=2,to=0,length.out=nloc/2),rep(0,nloc*1/2))
tmp2=c(rep(0,nloc/8),seq(from=0,to=2,length.out=nloc/8),seq(from=2,to=0,length.out=nloc/8),rep(0,nloc*5/8))
tmp3=c(rep(0,nloc/4),seq(from=0,to=2,length.out=nloc/8),seq(from=2,to=0,length.out=nloc/8),rep(0,nloc*4/8))
xmat=cbind(1,tmp1,tmp2,tmp3)
colnames(xmat)=paste('cov',0:(ncommun-1),sep='')
#look at xmat
plot(NA,NA,ylim=range(xmat),xlim=c(1,nloc),main='covariates')
for (i in 1:ncol(xmat)) lines(1:nloc,xmat[,i],col=i)
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(4)
setwd('U:\\GIT_models\\git_LDA_MS')
sourceCpp('aux1.cpp')
nloc=1000
nspp=100
ncommun=4
#generate covariates
tmp1=c(seq(from=2,to=0,length.out=nloc/2),rep(0,nloc*1/2))
tmp2=c(rep(0,nloc/8),seq(from=0,to=2,length.out=nloc/8),seq(from=2,to=0,length.out=nloc/8),rep(0,nloc*5/8))
tmp3=c(rep(0,nloc/4),seq(from=0,to=2,length.out=nloc/8),seq(from=2,to=0,length.out=nloc/8),rep(0,nloc*4/8))
xmat=cbind(1,tmp1,tmp2,tmp3)
colnames(xmat)=paste('cov',0:(ncommun-1),sep='')
#look at xmat
plot(NA,NA,ylim=range(xmat),xlim=c(1,nloc),main='covariates')
for (i in 2:ncol(xmat)) lines(1:nloc,xmat[,i],col=i)
betas.true
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(4)
setwd('U:\\GIT_models\\git_LDA_MS')
sourceCpp('aux1.cpp')
nloc=1000
nspp=100
ncommun=4
#generate covariates
tmp1=c(seq(from=2,to=0,length.out=nloc/2),rep(0,nloc*1/2))
tmp2=c(rep(0,nloc/8),seq(from=0,to=2,length.out=nloc/8),seq(from=2,to=0,length.out=nloc/8),rep(0,nloc*5/8))
tmp3=c(rep(0,nloc/4),seq(from=0,to=2,length.out=nloc/8),seq(from=2,to=0,length.out=nloc/8),rep(0,nloc*4/8))
xmat=cbind(1,tmp1,tmp2,tmp3)
colnames(xmat)=paste('cov',0:(ncommun-1),sep='')
#look at xmat
plot(NA,NA,ylim=range(xmat),xlim=c(1,nloc),main='covariates')
for (i in 2:ncol(xmat)) lines(1:nloc,xmat[,i],col=i)
#generate betas
betas=matrix(NA,ncol(xmat),ncommun-1)
betas[1,]=c(1,1,2)
seq1=c(2,3,2)
betas[2:4,]=diag(seq1,ncommun-1)
betas[betas==0]=-3
betas.true=betas
betas
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(4)
setwd('U:\\GIT_models\\git_LDA_MS')
sourceCpp('aux1.cpp')
nloc=1000
nspp=100
ncommun=4
#generate covariates
tmp1=c(seq(from=2,to=0,length.out=nloc/2),rep(0,nloc*1/2))
tmp2=c(rep(0,nloc/8),seq(from=0,to=2,length.out=nloc/8),seq(from=2,to=0,length.out=nloc/8),rep(0,nloc*5/8))
tmp3=c(rep(0,nloc/4),seq(from=0,to=2,length.out=nloc/8),seq(from=2,to=0,length.out=nloc/8),rep(0,nloc*4/8))
xmat=cbind(1,tmp1,tmp2,tmp3)
colnames(xmat)=paste('cov',0:(ncommun-1),sep='')
#look at xmat
plot(NA,NA,ylim=range(xmat),xlim=c(1,nloc),main='covariates')
for (i in 2:ncol(xmat)) lines(1:nloc,xmat[,i],col=i)
#generate betas
betas=matrix(NA,ncol(xmat),ncommun-1)
betas[,1]=c(1,1,0,0)
betas[,2]=c(1,0,1,0)
betas[,3]=c(1,0,0,1)
betas.true=betas
#generate probs
probs=matrix(NA,nloc,ncommun-1)
for (i in 1:(ncommun-1)){
media=xmat%*%betas[,i]
probs[,i]=1/(1+exp(-media))
}
probs.true=probs
range(probs)
vmat=cbind(probs,1)
theta.true=theta=convertVtoTheta(vmat,rep(1,nloc))
#this is important: it determines if the model will be able to disentagle these groups
boxplot(theta,ylim=c(0,1))
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(4)
setwd('U:\\GIT_models\\git_LDA_MS')
sourceCpp('aux1.cpp')
nloc=1000
nspp=100
ncommun=4
#generate covariates
tmp1=c(seq(from=2,to=0,length.out=nloc/2),rep(0,nloc*1/2))
tmp2=c(rep(0,nloc/8),seq(from=0,to=2,length.out=nloc/8),seq(from=2,to=0,length.out=nloc/8),rep(0,nloc*5/8))
tmp3=c(rep(0,nloc/4),seq(from=0,to=2,length.out=nloc/8),seq(from=2,to=0,length.out=nloc/8),rep(0,nloc*4/8))
xmat=cbind(1,tmp1,tmp2,tmp3)
colnames(xmat)=paste('cov',0:(ncommun-1),sep='')
#look at xmat
plot(NA,NA,ylim=range(xmat),xlim=c(1,nloc),main='covariates')
for (i in 2:ncol(xmat)) lines(1:nloc,xmat[,i],col=i)
#generate betas
betas=matrix(NA,ncol(xmat),ncommun-1)
betas[,1]=c(1,1,0,0)
betas[,2]=c(1,0,2,0)
betas[,3]=c(1,0,0,3)
betas.true=betas
#generate probs
probs=matrix(NA,nloc,ncommun-1)
for (i in 1:(ncommun-1)){
media=xmat%*%betas[,i]
probs[,i]=1/(1+exp(-media))
}
probs.true=probs
range(probs)
#generate thetas
vmat=cbind(probs,1)
theta.true=theta=convertVtoTheta(vmat,rep(1,nloc))
#this is important: it determines if the model will be able to disentagle these groups
boxplot(theta,ylim=c(0,1))
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(4)
setwd('U:\\GIT_models\\git_LDA_MS')
sourceCpp('aux1.cpp')
nloc=1000
nspp=100
ncommun=4
#generate covariates
tmp1=c(seq(from=2,to=0,length.out=nloc/2),rep(0,nloc*1/2))
tmp2=c(rep(0,nloc/8),seq(from=0,to=2,length.out=nloc/8),seq(from=2,to=0,length.out=nloc/8),rep(0,nloc*5/8))
tmp3=c(rep(0,nloc/4),seq(from=0,to=2,length.out=nloc/8),seq(from=2,to=0,length.out=nloc/8),rep(0,nloc*4/8))
xmat=cbind(1,tmp1,tmp2,tmp3)
colnames(xmat)=paste('cov',0:(ncommun-1),sep='')
#look at xmat
plot(NA,NA,ylim=range(xmat),xlim=c(1,nloc),main='covariates')
for (i in 2:ncol(xmat)) lines(1:nloc,xmat[,i],col=i)
#generate betas
betas=matrix(NA,ncol(xmat),ncommun-1)
betas[,1]=c(0,1,0,0)
betas[,2]=c(0,0,2,0)
betas[,3]=c(0,0,0,3)
betas.true=betas
#generate probs
probs=matrix(NA,nloc,ncommun-1)
for (i in 1:(ncommun-1)){
media=xmat%*%betas[,i]
probs[,i]=1/(1+exp(-media))
}
probs.true=probs
range(probs)
#generate thetas
vmat=cbind(probs,1)
theta.true=theta=convertVtoTheta(vmat,rep(1,nloc))
#this is important: it determines if the model will be able to disentagle these groups
boxplot(theta,ylim=c(0,1))
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(4)
setwd('U:\\GIT_models\\git_LDA_MS')
sourceCpp('aux1.cpp')
nloc=1000
nspp=100
ncommun=4
#generate covariates
tmp1=c(seq(from=2,to=0,length.out=nloc/2),rep(0,nloc*1/2))
tmp2=c(rep(0,nloc/8),seq(from=0,to=2,length.out=nloc/8),seq(from=2,to=0,length.out=nloc/8),rep(0,nloc*5/8))
tmp3=c(rep(0,nloc/4),seq(from=0,to=2,length.out=nloc/8),seq(from=2,to=0,length.out=nloc/8),rep(0,nloc*4/8))
xmat=cbind(1,tmp1,tmp2,tmp3)
colnames(xmat)=paste('cov',0:(ncommun-1),sep='')
#look at xmat
plot(NA,NA,ylim=range(xmat),xlim=c(1,nloc),main='covariates')
for (i in 2:ncol(xmat)) lines(1:nloc,xmat[,i],col=i)
#generate betas
betas=matrix(NA,ncol(xmat),ncommun-1)
betas[,1]=c(-1,1,0,0)
betas[,2]=c(-1,0,2,0)
betas[,3]=c(-1,0,0,3)
betas.true=betas
#generate probs
probs=matrix(NA,nloc,ncommun-1)
for (i in 1:(ncommun-1)){
media=xmat%*%betas[,i]
probs[,i]=1/(1+exp(-media))
}
probs.true=probs
range(probs)
#generate thetas
vmat=cbind(probs,1)
theta.true=theta=convertVtoTheta(vmat,rep(1,nloc))
#this is important: it determines if the model will be able to disentagle these groups
boxplot(theta,ylim=c(0,1))
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(4)
setwd('U:\\GIT_models\\git_LDA_MS')
sourceCpp('aux1.cpp')
nloc=1000
nspp=100
ncommun=4
#generate covariates
tmp1=c(seq(from=2,to=0,length.out=nloc/2),rep(0,nloc*1/2))
tmp2=c(rep(0,nloc/8),seq(from=0,to=2,length.out=nloc/8),seq(from=2,to=0,length.out=nloc/8),rep(0,nloc*5/8))
tmp3=c(rep(0,nloc/4),seq(from=0,to=2,length.out=nloc/8),seq(from=2,to=0,length.out=nloc/8),rep(0,nloc*4/8))
xmat=cbind(1,tmp1,tmp2,tmp3)
colnames(xmat)=paste('cov',0:(ncommun-1),sep='')
#look at xmat
plot(NA,NA,ylim=range(xmat),xlim=c(1,nloc),main='covariates')
for (i in 2:ncol(xmat)) lines(1:nloc,xmat[,i],col=i)
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(4)
setwd('U:\\GIT_models\\git_LDA_MS')
sourceCpp('aux1.cpp')
nloc=1000
nspp=100
ncommun=4
#generate covariates
tmp1=c(seq(from=2,to=0,length.out=nloc/2),rep(0,nloc*1/2))
tmp2=c(rep(0,nloc/8),seq(from=0,to=2,length.out=nloc/8),seq(from=2,to=0,length.out=nloc/8),rep(0,nloc*5/8))
tmp3=c(rep(0,nloc/4),seq(from=0,to=2,length.out=nloc/8),seq(from=2,to=0,length.out=nloc/8),rep(0,nloc*4/8))
xmat=cbind(1,tmp1,tmp2,tmp3)
colnames(xmat)=paste('cov',0:(ncommun-1),sep='')
#look at xmat
plot(NA,NA,ylim=range(xmat),xlim=c(1,nloc),main='covariates')
for (i in 2:ncol(xmat)) lines(1:nloc,xmat[,i],col=i)
#generate betas
betas=matrix(NA,ncol(xmat),ncommun-1)
betas[,1]=c(-1,1,0,0)*3
betas[,2]=c(-1,0,1,0)*3
betas[,3]=c(-1,0,0,1)*3
betas.true=betas
#generate probs
probs=matrix(NA,nloc,ncommun-1)
for (i in 1:(ncommun-1)){
media=xmat%*%betas[,i]
probs[,i]=1/(1+exp(-media))
}
probs.true=probs
range(probs)
#generate thetas
vmat=cbind(probs,1)
theta.true=theta=convertVtoTheta(vmat,rep(1,nloc))
#this is important: it determines if the model will be able to disentagle these groups
boxplot(theta,ylim=c(0,1))
plot(NA,NA,ylim=c(0,1),xlim=c(0,nloc))
for (i in 1:ncommun){
lines(theta[,i],col=i)
}
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(4)
setwd('U:\\GIT_models\\git_LDA_MS')
sourceCpp('aux1.cpp')
nloc=1000
nspp=100
ncommun=4
#generate covariates
tmp1=c(seq(from=2,to=0,length.out=nloc/2),rep(0,nloc*1/2))
tmp2=c(rep(0,nloc/8),seq(from=0,to=2,length.out=nloc/8),seq(from=2,to=0,length.out=nloc/8),rep(0,nloc*5/8))
tmp3=c(rep(0,nloc/4),seq(from=0,to=2,length.out=nloc/8),seq(from=2,to=0,length.out=nloc/8),rep(0,nloc*4/8))
xmat=cbind(1,tmp1,tmp2,tmp3)
colnames(xmat)=paste('cov',0:(ncommun-1),sep='')
#look at xmat
plot(NA,NA,ylim=range(xmat),xlim=c(1,nloc),main='covariates')
for (i in 2:ncol(xmat)) lines(1:nloc,xmat[,i],col=i)
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(4)
setwd('U:\\GIT_models\\git_LDA_MS')
sourceCpp('aux1.cpp')
nloc=1000
nspp=100
ncommun=4
#generate covariates
tmp1=c(seq(from=2,to=0,length.out=nloc/2),rep(0,nloc*1/2))
tmp2=c(rep(0,nloc/4),seq(from=0,to=2,length.out=nloc/8),seq(from=2,to=0,length.out=nloc/8),rep(0,nloc*4/8))
tmp3=c(rep(0,nloc/2),seq(from=0,to=2,length.out=nloc/4),seq(from=2,to=0,length.out=nloc/4))
xmat=cbind(1,tmp1,tmp2,tmp3)
colnames(xmat)=paste('cov',0:(ncommun-1),sep='')
#look at xmat
plot(NA,NA,ylim=range(xmat),xlim=c(1,nloc),main='covariates')
for (i in 2:ncol(xmat)) lines(1:nloc,xmat[,i],col=i)
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(4)
setwd('U:\\GIT_models\\git_LDA_MS')
sourceCpp('aux1.cpp')
nloc=1000
nspp=100
ncommun=4
#generate covariates
tmp1=c(seq(from=2,to=0,length.out=nloc/2),rep(0,nloc*1/2))
tmp2=c(rep(0,nloc/4),seq(from=0,to=2,length.out=nloc/8),seq(from=2,to=0,length.out=nloc/8),rep(0,nloc*4/8))
tmp3=c(rep(0,nloc/2),seq(from=0,to=2,length.out=nloc/4),seq(from=2,to=0,length.out=nloc/4))
xmat=cbind(1,tmp1,tmp2,tmp3)
colnames(xmat)=paste('cov',0:(ncommun-1),sep='')
#look at xmat
plot(NA,NA,ylim=range(xmat),xlim=c(1,nloc),main='covariates')
for (i in 2:ncol(xmat)) lines(1:nloc,xmat[,i],col=i)
#generate betas
betas=matrix(NA,ncol(xmat),ncommun-1)
betas[,1]=c(-1,1,0,0)*3
betas[,2]=c(-1,0,1,0)*3
betas[,3]=c(-1,0,0,1)*3
betas.true=betas
#generate probs
probs=matrix(NA,nloc,ncommun-1)
for (i in 1:(ncommun-1)){
media=xmat%*%betas[,i]
probs[,i]=1/(1+exp(-media))
}
probs.true=probs
range(probs)
#generate thetas
vmat=cbind(probs,1)
theta.true=theta=convertVtoTheta(vmat,rep(1,nloc))
#this is important: it determines if the model will be able to disentagle these groups
boxplot(theta,ylim=c(0,1))
#create true curves
plot(NA,NA,ylim=c(0,1),xlim=c(0,nloc))
for (i in 1:ncommun){
lines(theta[,i],col=i)
}
