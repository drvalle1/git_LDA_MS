w=diag(pred*(1-pred))
prec=t(xmat)%*%w%*%xmat
cov.est=solve(prec)
res.cc[oo,]=c(as.numeric(cov.true),as.numeric(cov.est))
print(c(diag(1/prec),diag(cov.est)))
#random sampling
ind=sample(1:nobs,size=length(ind))
dat=data.frame(y=y[ind],x=x[ind])
mod=glm(y~x,data=dat,family='binomial')
cov.true=vcov(mod)
conv.rs[oo]=mod$converged
#compare to my equations
xmat=data.matrix(cbind(1,dat$x))
pred=predict(mod,type='response')
w=diag(pred*(1-pred))
cov.est=solve(t(xmat)%*%w%*%xmat)
res.rs[oo,]=c(as.numeric(cov.true),as.numeric(cov.est))
oo=oo+1
}
}
seq1=seq(from=0.01,to=100,length.out=10000)
fim=data.frame(param=seq1,p95=pgamma(2,seq1,seq1))
seq1=seq(from=0.01,to=100,length.out=10000)
fim=data.frame(param=seq1,p95=pgamma(2,seq1,seq1))
diff1=abs(fim$p95-2)
which(diff1==min(diff1))
diff1
tail(diff1)
seq1=seq(from=0.01,to=100,length.out=10000)
fim=data.frame(param=seq1,p95=pgamma(2,seq1,seq1))
diff1=abs(fim$p95-0.95)
which(diff1==min(diff1))
seq1=seq(from=0.01,to=100,length.out=10000)
fim=data.frame(param=seq1,p95=pgamma(2,seq1,seq1))
diff1=abs(fim$p95-0.95)
which(diff1==min(diff1))
fim[356,]
param=fim$param[356]
seq1=seq(from=0.01,to=10,length.out=10000)
plot(seq1,dgamma(seq1,param,param),type='l')
param
z=rgamma(100000,param,param)
mean(z<2)
mean(z)
mean(z<0.1)
rm(list=ls(all=TRUE))
setwd('U:\\uf\\courses\\stats\\2019 new exercises')
dat=read.csv('water gauge data.csv',as.is=T)
head(dat)
devtools::install_github('yihui/tinytex')
devtools::install_github("rmarkdown")
install.packages('rmarkdown')
install.packages("rmarkdown")
rm(list=ls(all=TRUE))
library('Rcpp')
library('RcppArmadillo')
library(inline)
set.seed(4)
#get functions
setwd('U:\\independent studies\\LDA explorations')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
rm(list=ls(all=TRUE))
library('Rcpp')
library('RcppArmadillo')
library(inline)
set.seed(4)
#get functions
setwd('U:\\independent studies\\LDA explorations')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
rm(list=ls(all=TRUE))
library('Rcpp')
library('RcppArmadillo')
library(inline)
set.seed(4)
#get functions
setwd('U:\\independent studies\\LDA explorations')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
#get data
dat=read.csv('fake data8.csv',as.is=T)
nloc=nrow(dat)
#basic settings
ncomm=8
ngibbs=1000
nburn=ngibbs/2
#priors
phi.prior=0.1
lambda.a=lambda.b=1
#useful stuff
y=data.matrix(dat)
nloc=nrow(y)
nspp=ncol(y)
#initial values
array.lsk=array(0,dim=c(nloc,nspp,ncomm))
array.lsk=array(0,dim=c(nloc,nspp,ncomm))
for (i in 1:nloc){
for (j in 1:nspp){
if (y[i,j]!=0){
array.lsk[i,j,]=rmultinom(1,size=y[i,j],prob=rep(1/ncomm,ncomm))
}
}
}
#basic test
# z=apply(array.lsk,1:2,sum)
# unique(y-z)
nlk=apply(array.lsk,c(1,3),sum)
nks=t(apply(array.lsk,2:3,sum))
lambda=apply(nlk,2,mean)
phi=matrix(1/nspp,ncomm,nspp)
#to store outcomes from gibbs sampler
lambda.out=matrix(NA,ngibbs,ncomm)
phi.out=matrix(NA,ngibbs,nloc*nspp)
llk=rep(NA,ngibbs)
llambda=matrix(log(lambda),nloc,ncomm,byrow=T)
lmedia=llambda
lphi=log(phi)
rm(list=ls(all=TRUE))
library('Rcpp')
library('RcppArmadillo')
library(inline)
set.seed(4)
#get functions
setwd('U:\\independent studies\\LDA explorations')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
#get data
dat=read.csv('fake data8.csv',as.is=T)
nloc=nrow(dat)
#basic settings
ncomm=8
ngibbs=1000
nburn=ngibbs/2
#priors
phi.prior=0.1
lambda.a=lambda.b=1
#useful stuff
y=data.matrix(dat)
nloc=nrow(y)
nspp=ncol(y)
#initial values
array.lsk=array(0,dim=c(nloc,nspp,ncomm))
for (i in 1:nloc){
for (j in 1:nspp){
if (y[i,j]!=0){
array.lsk[i,j,]=rmultinom(1,size=y[i,j],prob=rep(1/ncomm,ncomm))
}
}
}
#basic test
# z=apply(array.lsk,1:2,sum)
# unique(y-z)
nlk=apply(array.lsk,c(1,3),sum)
nks=t(apply(array.lsk,2:3,sum))
lambda=apply(nlk,2,mean)
phi=matrix(1/nspp,ncomm,nspp)
#to store outcomes from gibbs sampler
lambda.out=matrix(NA,ngibbs,ncomm)
phi.out=matrix(NA,ngibbs,nloc*nspp)
llk=rep(NA,ngibbs)
#run gibbs sampler
options(warn=2)
llambda=matrix(log(lambda),nloc,ncomm,byrow=T)
lmedia=llambda
lphi=log(phi)
tmp = GetArrayP1(lphi=lphi,lmedia=lmedia,nloc=nloc,nspp=nspp,ncomm=ncomm)
tmp = GetArrayP1a(lphi=lphi,lmedia=lmedia,nloc=nloc,nspp=nspp,ncomm=ncomm)
array.p1 = array(tmp,dim=c(nloc,nspp,ncomm))
teste=array(NA,dim=c(nloc,nspp,ncomm))
for (l in 1:nloc){
for (s in 1:nspp){
for (k in 1:ncomm){
teste[l,s,k]=lphi[k,s]+lmedia[l,k]
}
}
}
sum(array.p1!=teste)
identical(array.p1,teste)
setwd('U:\\independent studies\\LDA explorations')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
setwd('U:\\independent studies\\LDA explorations')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
setwd('U:\\independent studies\\LDA explorations')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
setwd('U:\\independent studies\\LDA explorations')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
setwd('U:\\independent studies\\LDA explorations')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
setwd('U:\\independent studies\\LDA explorations')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
setwd('U:\\independent studies\\LDA explorations')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
setwd('U:\\independent studies\\LDA explorations')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
n=1000
runif1=runif(n)
prob=c(0.1,0.5,0.3,0.1)
i=1
ind=RmultinomSingle(runif1=runif1[i], prob=prob, ncommun=length(prob))
ind
rm(list=ls(all=TRUE))
library('Rcpp')
library('RcppArmadillo')
library(inline)
set.seed(4)
#get functions
setwd('U:\\independent studies\\LDA explorations')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
n=1000
runif1=runif(n)
prob=c(0.1,0.5,0.3,0.1)
ncommun=length(prob)
res=rep(0,)
for (i in 1:n){
ind=1+RmultinomSingle(runif1=runif1[i], prob=prob, ncommun=ncommun)
res[ind]=res[ind]+1
}
res/sum(res)
rm(list=ls(all=TRUE))
library('Rcpp')
library('RcppArmadillo')
library(inline)
set.seed(4)
#get functions
setwd('U:\\independent studies\\LDA explorations')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
n=1000
runif1=runif(n)
prob=c(0.1,0.5,0.3,0.1)
ncommun=length(prob)
res=rep(0,ncommun)
for (i in 1:n){
ind=1+RmultinomSingle(runif1=runif1[i], prob=prob, ncommun=ncommun)
res[ind]=res[ind]+1
}
res/sum(res)
rm(list=ls(all=TRUE))
library('Rcpp')
library('RcppArmadillo')
library(inline)
set.seed(4)
#get functions
setwd('U:\\independent studies\\LDA explorations')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
n=1000
runif1=runif(n)
prob=c(0.1,0.5,0.3,0.1)
ncommun=length(prob)
res=rep(0,ncommun)
for (i in 1:n){
ind=1+RmultinomSingle(runif1=runif1[i], prob=prob, ncommun=ncommun)
res[ind]=res[ind]+1
}
res/sum(res)
rm(list=ls(all=TRUE))
library('Rcpp')
library('RcppArmadillo')
library(inline)
set.seed(4)
#get functions
setwd('U:\\independent studies\\LDA explorations')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
n=1000
runif1=runif(n)
prob=c(0.1,0.5,0.3,0.1)
ncommun=length(prob)
res=rep(0,ncommun)
i=1
ind=1+RmultinomSingle(runif1=runif1[i], prob=prob, ncommun=ncommun)
ind
res=rep(0,ncommun)
for (i in 1:n){
ind=1+RmultinomSingle(runif1=runif1[i], prob=prob, ncommun=ncommun)
res[ind]=res[ind]+1
}
res
i=10
RmultinomSingle(runif1=runif1[i], prob=prob, ncommun=ncommun)
runif1[i]
prob
ncommun
RmultinomSingle(runif1=runif1[i], prob=prob, ncommun=ncommun)
rm(list=ls(all=TRUE))
library('Rcpp')
library('RcppArmadillo')
library(inline)
set.seed(4)
#get functions
setwd('U:\\independent studies\\LDA explorations')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
n=1000
runif1=runif(n)
prob=c(0.1,0.5,0.3,0.1)
ncommun=length(prob)
res=rep(0,ncommun)
i=10
ind=1+RmultinomSingle(runif1=runif1[i], prob=prob, ncommun=ncommun)
ind
prob
runif1[i]
rm(list=ls(all=TRUE))
library('Rcpp')
library('RcppArmadillo')
library(inline)
set.seed(4)
#get functions
setwd('U:\\independent studies\\LDA explorations')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
n=1000
runif1=runif(n)
prob=c(0.1,0.5,0.3,0.1)
ncommun=length(prob)
res=rep(0,ncommun)
for (i in 1:n){
ind=1+RmultinomSingle(runif1=runif1[i], prob=prob, ncommun=ncommun)
res[ind]=res[ind]+1
}
res/sum(res)
rm(list=ls(all=TRUE))
library('Rcpp')
library('RcppArmadillo')
library(inline)
set.seed(4)
#get functions
setwd('U:\\independent studies\\LDA explorations')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
n=1000
runif1=runif(n)
prob=c(0.1,0.2,0.3,0.4)
ncommun=length(prob)
res=rep(0,ncommun)
for (i in 1:n){
ind=1+RmultinomSingle(runif1=runif1[i], prob=prob, ncommun=ncommun)
res[ind]=res[ind]+1
}
res/sum(res)
rm(list=ls(all=TRUE))
library('Rcpp')
library('RcppArmadillo')
library(inline)
set.seed(4)
#get functions
setwd('U:\\independent studies\\LDA explorations')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
n=1000
runif1=runif(n)
prob=c(0.3,0.1,0.1,0.5)
ncommun=length(prob)
res=rep(0,ncommun)
for (i in 1:n){
ind=1+RmultinomSingle(runif1=runif1[i], prob=prob, ncommun=ncommun)
res[ind]=res[ind]+1
}
res/sum(res)
rm(list=ls(all=TRUE))
library('Rcpp')
library('RcppArmadillo')
library(inline)
set.seed(4)
#get functions
setwd('U:\\independent studies\\LDA explorations')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
rm(list=ls(all=TRUE))
library('Rcpp')
library('RcppArmadillo')
library(inline)
set.seed(4)
#get functions
setwd('U:\\independent studies\\LDA explorations')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
rm(list=ls(all=TRUE))
library('Rcpp')
library('RcppArmadillo')
library(inline)
set.seed(4)
#get functions
setwd('U:\\independent studies\\LDA explorations')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
rm(list=ls(all=TRUE))
library('Rcpp')
library('RcppArmadillo')
library(inline)
set.seed(4)
#get functions
setwd('U:\\independent studies\\LDA explorations')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
RmultinomSingle(runif1=0.5, prob=c(0.1,0.4,0.3,0.2), ncomm=4)
rm(list=ls(all=TRUE))
library('Rcpp')
library('RcppArmadillo')
library(inline)
set.seed(4)
#get functions
setwd('U:\\independent studies\\LDA explorations')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
rm(list=ls(all=TRUE))
library('Rcpp')
library('RcppArmadillo')
library(inline)
set.seed(4)
#get functions
setwd('U:\\independent studies\\LDA explorations')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
rm(list=ls(all=TRUE))
library('Rcpp')
library('RcppArmadillo')
library(inline)
set.seed(4)
#get functions
setwd('U:\\independent studies\\LDA explorations')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
rm(list=ls(all=TRUE))
library('Rcpp')
library('RcppArmadillo')
library(inline)
set.seed(4)
#get functions
setwd('U:\\independent studies\\LDA explorations')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
rm(list=ls(all=TRUE))
library('Rcpp')
library('RcppArmadillo')
library(inline)
set.seed(4)
#get functions
setwd('U:\\independent studies\\LDA explorations')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
rm(list=ls(all=TRUE))
library('Rcpp')
library('RcppArmadillo')
library(inline)
set.seed(4)
#get functions
setwd('U:\\independent studies\\LDA explorations')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
rm(list=ls(all=TRUE))
library('Rcpp')
library('RcppArmadillo')
library(inline)
set.seed(4)
#get functions
setwd('U:\\independent studies\\LDA explorations')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
RmultinomSingle(runif1=0.32, prob=c(0.1,0.5,0.4), ncomm=3)
RmultinomSingle(runif1=0.32, prob=c(0.1,0.5,0.4), ncomm=3)
RmultinomSingle(runif1=0.32, prob=c(0.1,0.5,0.4), ncomm=3)
RmultinomSingle(runif1=0.32, prob=c(0.1,0.5,0.4), ncomm=3)
RmultinomSingle(runif1=0.32, prob=c(0.1,0.5,0.4), ncomm=3)
RmultinomSingle(runif1=0.32, prob=c(0.1,0.5,0.4), ncomm=3)
RmultinomSingle(runif1=0.32, prob=c(0.1,0.5,0.4), ncomm=3)
RmultinomSingle(runif1=0.32, prob=c(0.1,0.5,0.4), ncomm=3)
RmultinomSingle(runif1=0.32, prob=c(0.1,0.5,0.4), ncomm=3)
RmultinomSingle(runif1=0.32, prob=c(0.1,0.5,0.4), ncomm=3)
RmultinomSingle(runif1=0.32, prob=c(0.1,0.5,0.4), ncomm=3)
RmultinomSingle(runif1=0.32, prob=c(0.1,0.5,0.4), ncomm=3)
RmultinomSingle(runif1=0.32, prob=c(0.1,0.5,0.4), ncomm=3)
rm(list=ls(all=TRUE))
library('Rcpp')
library('RcppArmadillo')
library(inline)
set.seed(4)
#get functions
setwd('U:\\independent studies\\LDA explorations')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
n=1000
runif1=runif(n)
prob=c(0.3,0.1,0.1,0.5)
ncommun=length(prob)
res=rep(0,ncommun)
for (i in 1:n){
ind=1+RmultinomSingle(runif1=runif1[i], prob=prob, ncommun=ncommun)
res[ind]=res[ind]+1
}
res/sum(res)
rm(list=ls(all=TRUE))
library('Rcpp')
library('RcppArmadillo')
library(inline)
set.seed(4)
#get functions
setwd('U:\\independent studies\\LDA explorations')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
