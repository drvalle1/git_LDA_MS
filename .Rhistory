x=x[x!=0]
p=n/(mu+n)
mean(x);
denom=(1-(p^n))
(1/denom)*mu
n=0.01
mu=100
x=rnbinom(nobs,mu=mu,size=n)
x=x[x!=0]
p=n/(mu+n)
mean(x);
denom=(1-(p^n))
(1/denom)*mu
n=0.01
mu=100
x=rnbinom(nobs,mu=mu,size=n)
x=x[x!=0]
p=n/(mu+n)
mean(x);
denom=(1-(p^n))
(1/denom)*mu
rm(list=ls(all=TRUE))
library(MCMCpack)
library('Rcpp')
library('RcppArmadillo')
set.seed(33)
#get data
setwd('Z:\\Users\\drvalle\\GIT_models\\git_LDA_MS\\order dados')
dat=read.csv('y.csv',as.is=T)
xmat=data.matrix(read.csv('xmat.csv',as.is=T))
y=data.matrix(dat)
dim(y)
head(y)
hist(apply(y,1,sum))
mean(y==0)
head(xmat)
apply(xmat==1,2,mean)
setwd('Z:\\Users\\drvalle\\GIT_models\\git_LDA_abundance')
rm(list=ls(all=TRUE))
library(MCMCpack)
library('Rcpp')
library('RcppArmadillo')
set.seed(33)
#get data
setwd('Z:\\Users\\drvalle\\GIT_models\\git_LDA_MS\\order dados')
dat=read.csv('y.csv',as.is=T)
xmat=data.matrix(read.csv('xmat.csv',as.is=T))
y=data.matrix(dat)
#basic settings
ncomm.init=10
ngibbs=1000
nburn=ngibbs/2
#priors
psi=0.01
gamma=0.1
#----------------------------------------------------------
#run LDA no covariates to get initial values
#get functions
setwd('Z:\\Users\\drvalle\\GIT_models\\git_LDA_abundance')
source('gibbs functions.R')
source('LDA.abundance main function.R')
sourceCpp('aux1.cpp')
res=LDA.abundance(y=y,ncomm=ncomm.init,ngibbs=ngibbs,nburn=nburn,psi=psi,gamma=gamma)
nloc=nrow(y)
nspp=ncol(y)
array.lsk.init=res$array.lsk
nlk=apply(array.lsk.init,c(1,3),sum)
theta=nlk/apply(nlk,1,sum)
par(mfrow=c(1,1),mar=c(3,3,1,1))
boxplot(theta)
ncomm=3
prop=apply(theta>0.99,2,sum,na.rm=T) #see which communities are never above 0.8
which(prop!=0)
cond=prop!=0
ncomm=sum(cond)
plot(res$llk,type='l')
rm(list=ls(all=TRUE))
library(MCMCpack)
library('Rcpp')
library('RcppArmadillo')
set.seed(33)
#get data
setwd('Z:\\Users\\drvalle\\GIT_models\\git_LDA_MS\\order dados')
dat=read.csv('y.csv',as.is=T)
xmat=data.matrix(read.csv('xmat.csv',as.is=T))
y=data.matrix(dat)
#basic settings
ncomm.init=10
ngibbs=1000
nburn=ngibbs/2
#priors
psi=0.01
gamma=0.5
#----------------------------------------------------------
#run LDA no covariates to get initial values
#get functions
setwd('Z:\\Users\\drvalle\\GIT_models\\git_LDA_abundance')
source('gibbs functions.R')
source('LDA.abundance main function.R')
sourceCpp('aux1.cpp')
res=LDA.abundance(y=y,ncomm=ncomm.init,ngibbs=ngibbs,nburn=nburn,psi=psi,gamma=gamma)
nloc=nrow(y)
nspp=ncol(y)
array.lsk.init=res$array.lsk
#look at convergence
plot(res$llk,type='l')
dim(y)
nloc=nrow(y)
nspp=ncol(y)
array.lsk.init=res$array.lsk
#look at convergence
plot(res$llk,type='l')
#determine optimal number of groups
nlk=apply(array.lsk.init,c(1,3),sum)
theta=nlk/apply(nlk,1,sum)
par(mfrow=c(1,1),mar=c(3,3,1,1))
boxplot(theta)
ncomm=3
prop=apply(theta>0.99,2,sum,na.rm=T) #see which communities are never above 0.8
prop
array.lsk=array.lsk.init[,,ind]
for (i in 1:nloc){
for (j in 1:nspp){
tmp=array.lsk.init[i,j,-ind]
n=sum(tmp)
if (n>0){
z=rmultinom(1,size=n,prob=rep(1/ncomm,ncomm))
array.lsk[i,j,]=array.lsk[i,j,]+z
}
}
}
ncomm=3
ind=1:ncomm
prop=apply(theta>0.99,2,sum,na.rm=T) #see which communities are never above 0.8
which(prop!=0)
# cond=prop!=0
# ncomm=sum(cond)
#re-distribute individuals within array.lsk.init that are in eliminated communities
array.lsk=array.lsk.init[,,ind]
for (i in 1:nloc){
for (j in 1:nspp){
tmp=array.lsk.init[i,j,-ind]
n=sum(tmp)
if (n>0){
z=rmultinom(1,size=n,prob=rep(1/ncomm,ncomm))
array.lsk[i,j,]=array.lsk[i,j,]+z
}
}
}
setwd('Z:\\Users\\drvalle\\GIT_models\\git_LDA_MS\\order dados')
dat1=matrix(array.lsk,nloc*nspp*ncomm,1)
write.csv(dat1,'array lsk.csv',row.names=F)
rm(list=ls(all=TRUE))
library(MCMCpack)
library('Rcpp')
set.seed(10)
#get data
setwd('Z:\\Users\\drvalle\\GIT_models\\git_LDA_MS\\order dados')
y=read.csv('y.csv',as.is=T)
xmat=data.matrix(read.csv('xmat.csv',as.is=T))
y=data.matrix(dat)
nloc=nrow(y)
nspp=ncol(y)
rm(list=ls(all=TRUE))
library(MCMCpack)
library('Rcpp')
set.seed(10)
#get data
setwd('Z:\\Users\\drvalle\\GIT_models\\git_LDA_MS\\order dados')
dat=read.csv('y.csv',as.is=T)
xmat=data.matrix(read.csv('xmat.csv',as.is=T))
y=data.matrix(dat)
nloc=nrow(y)
nspp=ncol(y)
tmp=read.csv('array lsk.csv',as.is=T)
ncomm=length(tmp$V1)/(nspp*nloc); ncomm
array.lsk.init=array(tmp$V1,dim=c(nloc,nspp,ncomm))
ngibbs=1000
nburn=ngibbs/2
#priors
phi.prior=0.01
var.betas=c(10,rep(10,ncol(xmat)-1))
gamma=0.1
setwd('Z:\\Users\\drvalle\\GIT_models\\git_LDA_MS')
source('LDA cov main function.R')
source('LDA cov aux functions.R')
sourceCpp('LDA_cov_aux1_cpp.cpp')
sourceCpp('slice_betas.cpp')
sourceCpp('slice_NBN.cpp')
rm(list=ls(all=TRUE))
library(MCMCpack)
library('Rcpp')
set.seed(10)
#get data
setwd('Z:\\Users\\drvalle\\GIT_models\\git_LDA_MS\\order dados')
dat=read.csv('y.csv',as.is=T)
xmat=data.matrix(read.csv('xmat.csv',as.is=T))
y=data.matrix(dat)
nloc=nrow(y)
nspp=ncol(y)
#get array.lsk
tmp=read.csv('array lsk.csv',as.is=T)
ncomm=length(tmp$V1)/(nspp*nloc); ncomm
array.lsk.init=array(tmp$V1,dim=c(nloc,nspp,ncomm))
#basic settings
ngibbs=1000
nburn=ngibbs/2
#priors
phi.prior=0.01
var.betas=c(10,rep(10,ncol(xmat)-1))
gamma=0.1
#----------------------------------------------------------
#LDA with covariates
#get functions
setwd('Z:\\Users\\drvalle\\GIT_models\\git_LDA_MS')
source('LDA cov main function.R')
source('LDA cov aux functions.R')
sourceCpp('LDA_cov_aux1_cpp.cpp')
sourceCpp('slice_betas.cpp')
sourceCpp('slice_NBN.cpp')
res=gibbs.LDA.cov(ncomm=ncomm,ngibbs=ngibbs,nburn=nburn,y=y,xmat=xmat,
phi.prior=phi.prior,array.lsk.init=array.lsk.init,
var.betas=var.betas)
plot(res$llk,type='l')
plot(res$fmodel,type='l')
str(res)
rm(list=ls(all=TRUE))
library(MCMCpack)
library('Rcpp')
set.seed(10)
#get data
setwd('U:\\GIT_models\\git_LDA_MS')
dat=read.csv('fake data.csv',as.is=T)
xmat=data.matrix(read.csv('fake data xmat.csv',as.is=T))
y=data.matrix(dat)
nloc=nrow(y)
nspp=ncol(y)
#get array.lsk
tmp=read.csv('array lsk.csv',as.is=T)
ncomm=length(tmp$V1)/(nspp*nloc); ncomm
array.lsk.init=array(tmp$V1,dim=c(nloc,nspp,ncomm))
#basic settings
ngibbs=1000
nburn=ngibbs/2
#priors
phi.prior=0.01
var.betas=c(10,rep(10,ncol(xmat)-1))
gamma=0.1
#----------------------------------------------------------
#LDA with covariates
#get functions
setwd('U:\\GIT_models\\git_LDA_MS')
source('LDA cov main function.R')
source('LDA cov aux functions.R')
sourceCpp('LDA_cov_aux1_cpp.cpp')
sourceCpp('slice_betas.cpp')
sourceCpp('slice_NBN.cpp')
head(xmat)
rm(list=ls(all=TRUE))
library(MCMCpack)
library('Rcpp')
set.seed(10)
#get data
setwd('U:\\GIT_models\\git_LDA_MS')
dat=read.csv('fake data.csv',as.is=T)
xmat=data.matrix(read.csv('fake data xmat.csv',as.is=T))
y=data.matrix(dat)
nloc=nrow(y)
nspp=ncol(y)
#get array.lsk
tmp=read.csv('array lsk.csv',as.is=T)
ncomm=length(tmp$V1)/(nspp*nloc); ncomm
array.lsk.init=array(tmp$V1,dim=c(nloc,nspp,ncomm))
#basic settings
ngibbs=1000
nburn=ngibbs/2
#priors
phi.prior=0.01
var.betas=c(10,rep(10,ncol(xmat)-1))
gamma=0.1
#----------------------------------------------------------
#LDA with covariates
#get functions
setwd('U:\\GIT_models\\git_LDA_MS')
source('LDA cov main function.R')
source('LDA cov aux functions.R')
sourceCpp('LDA_cov_aux1_cpp.cpp')
sourceCpp('slice_betas.cpp')
sourceCpp('slice_NBN.cpp')
head(xmat)
xmat=xmat[,1:2]
res=gibbs.LDA.cov(ncomm=ncomm,ngibbs=ngibbs,nburn=nburn,y=y,xmat=xmat,
phi.prior=phi.prior,array.lsk.init=array.lsk.init,
var.betas=var.betas)
nparam=ncol(xmat)
nloc=nrow(y)
nspp=ncol(y)
ntot=apply(y,1,sum)
#initial values
array.lsk=array.lsk.init
nlk=apply(array.lsk,c(1,3),sum)
betas=matrix(0,nparam,ncomm)
options(warn=-1) #sometimes I get "glm.fit: fitted rates numerically 0 occurred" here
for (i in 1:ncomm){
dat.tmp=cbind(nlk[,i],xmat[,-1])
colnames(dat.tmp)[1]='y'
dat.tmp1=as.data.frame(dat.tmp)
res=glm(y~.,data=dat.tmp1,family='poisson')
betas[,i]=res$coef
}
i
head(dat.tmp)
i=1
dat.tmp=cbind(nlk[,i],xmat[,-1])
colnames(dat.tmp)[1]='y'
dim(dat.tmp)
colnames(dat.tmp)
colnames(dat.tmp)=c('z','y')
colnames(dat.tmp)[1]='y'
dat.tmp=cbind(nlk[,i],xmat[,-1])
colnames(dat.tmp)[1]='y'
dat.tmp=cbind(nlk[,i],xmat[,-1])
colnames(dat.tmp)=rep('',ncol(dat.tmp))
colnames(dat.tmp)[1]='y'
head(dat.tmp)
dat.tmp1=as.data.frame(dat.tmp)
res=glm(y~.,data=dat.tmp1,family='poisson')
rm(list=ls(all=TRUE))
library(MCMCpack)
library('Rcpp')
set.seed(10)
#get data
setwd('U:\\GIT_models\\git_LDA_MS')
dat=read.csv('fake data.csv',as.is=T)
xmat=data.matrix(read.csv('fake data xmat.csv',as.is=T))
y=data.matrix(dat)
nloc=nrow(y)
nspp=ncol(y)
#get array.lsk
tmp=read.csv('array lsk.csv',as.is=T)
ncomm=length(tmp$V1)/(nspp*nloc); ncomm
array.lsk.init=array(tmp$V1,dim=c(nloc,nspp,ncomm))
#basic settings
ngibbs=1000
nburn=ngibbs/2
#priors
phi.prior=0.01
var.betas=c(10,rep(10,ncol(xmat)-1))
gamma=0.1
#----------------------------------------------------------
#LDA with covariates
#get functions
setwd('U:\\GIT_models\\git_LDA_MS')
source('LDA cov main function.R')
source('LDA cov aux functions.R')
sourceCpp('LDA_cov_aux1_cpp.cpp')
sourceCpp('slice_betas.cpp')
sourceCpp('slice_NBN.cpp')
head(xmat)
xmat=xmat[,1:2]
res=gibbs.LDA.cov(ncomm=ncomm,ngibbs=ngibbs,nburn=nburn,y=y,xmat=xmat,
phi.prior=phi.prior,array.lsk.init=array.lsk.init,
var.betas=var.betas)
#basic settings
nparam=ncol(xmat)
nloc=nrow(y)
nspp=ncol(y)
ntot=apply(y,1,sum)
#initial values
array.lsk=array.lsk.init
nlk=apply(array.lsk,c(1,3),sum)
betas=matrix(0,nparam,ncomm)
options(warn=-1) #sometimes I get "glm.fit: fitted rates numerically 0 occurred" here
for (i in 1:ncomm){
dat.tmp=cbind(nlk[,i],xmat[,-1])
colnames(dat.tmp)=rep('',ncol(dat.tmp))
colnames(dat.tmp)[1]='y'
dat.tmp1=as.data.frame(dat.tmp)
res=glm(y~.,data=dat.tmp1,family='poisson')
betas[,i]=res$coef
}
options(warn=2)
nks=t(apply(array.lsk,2:3,sum))
nk=rowSums(nks)
phi=nks/apply(nks,1,sum); apply(phi,1,sum)
NBN=100
#to store outcomes from gibbs sampler
phi.out=matrix(NA,ngibbs,nspp*ncomm)
nlk.out=matrix(NA,ngibbs,nloc*ncomm)
llk.out=rep(NA,ngibbs)
fmodel.out=matrix(NA,ngibbs,1)
betas.out=matrix(NA,ngibbs,nparam*ncomm)
NBN.out=matrix(NA,ngibbs,1)
#useful stuff for slice sampler algorithm
w.betas=0.1
w.NBN=10
MaxIter=100
#run gibbs sampler
options(warn=2)
media=exp(xmat%*%betas) #get mean
NBP=NBN/(media+NBN)     #get NBP
tmp = SampleArray(Arraylsk=array.lsk, nloc=nloc,nspp=nspp,ncomm=ncomm,NBN=NBN,
y=y,LogPhi=log(phi),LogOneMinusP=log(1-NBP),
runif1=runif(sum(y)),nlk=nlk)
array.lsk=tmp$ArrayLSK
# array.lsk=array.lsk.true
nlk=apply(array.lsk,c(1,3),sum)
nks=t(apply(array.lsk,2:3,sum))
nk=rowSums(nks)
#sample betas
betas=SampleBetas(param=betas,y=nlk,xmat=xmat,w=w.betas,nparam=nparam,
ncomm=ncomm,var1=var.betas,NBN=NBN,MaxIter=MaxIter)
#sample phi
phi=rdirichlet1(alpha=nks+phi.prior,ncomm=ncomm,nspp=nspp)
# phi=phi.true
#sample NBN
media=exp(xmat%*%betas) #get mean
NBN=SampleNBN(Media=media,y=nlk,NBN=NBN,w=w.NBN,MaxIter=MaxIter)
#calculate NB probabilities
p1=sum(dnbinom(nlk,mu=media,size=NBN,log=T))
#calculate Multinom probabilities
# tmp=0
# for (l in 1:nloc){
#   for (k in 1:ncomm){
#     tmp=tmp+dmultinom(array.lsk[l,,k],size=sum(array.lsk[l,,k]),prob=phi[k,],log=T)
#   }
# }
phi.tmp=phi; phi.tmp[phi.tmp<0.00000000001]=0.00000000001
tmp=LogLikMultin(nloc=nloc,ncomm=ncomm,nspp=nspp,LogPhi=log(phi.tmp), Arraylsk=array.lsk)
p2=sum(tmp)
#get phi prior
p3=ldirichlet(x=phi.tmp,alpha=phi.prior)
# log(ddirichlet(phi.tmp[2,],rep(phi.prior,nspp)))
#get betas prior
var.betas1=matrix(var.betas,nparam,ncomm)
p4=dnorm(betas,mean=0,sd=sqrt(var.betas1),log=T)
nparam
ncomm
dim(var.betas)
length(var.betas)
var.betas
ncomm
rm(list=ls(all=TRUE))
library(MCMCpack)
library('Rcpp')
set.seed(10)
#get data
setwd('U:\\GIT_models\\git_LDA_MS')
dat=read.csv('fake data.csv',as.is=T)
xmat=data.matrix(read.csv('fake data xmat.csv',as.is=T))
xmat=xmat[,1:2]
y=data.matrix(dat)
nloc=nrow(y)
nspp=ncol(y)
#get array.lsk
tmp=read.csv('array lsk.csv',as.is=T)
ncomm=length(tmp$V1)/(nspp*nloc); ncomm
array.lsk.init=array(tmp$V1,dim=c(nloc,nspp,ncomm))
#basic settings
ngibbs=1000
nburn=ngibbs/2
#priors
phi.prior=0.01
var.betas=c(10,rep(10,ncol(xmat)-1))
gamma=0.1
#----------------------------------------------------------
#LDA with covariates
#get functions
setwd('U:\\GIT_models\\git_LDA_MS')
source('LDA cov main function.R')
source('LDA cov aux functions.R')
sourceCpp('LDA_cov_aux1_cpp.cpp')
sourceCpp('slice_betas.cpp')
sourceCpp('slice_NBN.cpp')
res=gibbs.LDA.cov(ncomm=ncomm,ngibbs=ngibbs,nburn=nburn,y=y,xmat=xmat,
phi.prior=phi.prior,array.lsk.init=array.lsk.init,
var.betas=var.betas)
rm(list=ls(all=TRUE))
library(MCMCpack)
library('Rcpp')
set.seed(10)
#get data
setwd('U:\\GIT_models\\git_LDA_MS')
dat=read.csv('fake data.csv',as.is=T)
xmat=data.matrix(read.csv('fake data xmat.csv',as.is=T))
# xmat=xmat[,1:2]
y=data.matrix(dat)
nloc=nrow(y)
nspp=ncol(y)
#get array.lsk
tmp=read.csv('array lsk.csv',as.is=T)
ncomm=length(tmp$V1)/(nspp*nloc); ncomm
array.lsk.init=array(tmp$V1,dim=c(nloc,nspp,ncomm))
#basic settings
ngibbs=1000
nburn=ngibbs/2
#priors
phi.prior=0.01
var.betas=c(10,rep(10,ncol(xmat)-1))
gamma=0.1
#----------------------------------------------------------
#LDA with covariates
#get functions
setwd('U:\\GIT_models\\git_LDA_MS')
source('LDA cov main function.R')
source('LDA cov aux functions.R')
sourceCpp('LDA_cov_aux1_cpp.cpp')
sourceCpp('slice_betas.cpp')
sourceCpp('slice_NBN.cpp')
res=gibbs.LDA.cov(ncomm=ncomm,ngibbs=ngibbs,nburn=nburn,y=y,xmat=xmat,
phi.prior=phi.prior,array.lsk.init=array.lsk.init,
var.betas=var.betas)
