betas=cbind(betas.true,0,0)
#sample thetas
theta=sample.theta(theta=theta,a1=a1,b1=b1,a2=a2,b2=b2,nlk=nlk,ncomm=ncomm,nloc=nloc,
xmat=xmat,betas=betas)
lambda=GetLambda(LogTheta=log(theta),ncomm=ncomm)
# lambda=c(lambda.true,0.1,0.1)
#adaptive MH
if (i%%accept.output==0 & i<nadapt){
k=print.adapt(accept1z=accept1,jump1z=jump1,accept.output=accept.output)
accept1=k$accept1
jump1=k$jump1
}
#calculate Poisson probabilities
media=matrix(lambda,nloc,ncomm,byrow=T)*exp(xmat%*%betas)
p1=dpois(nlk,media,log=T)
# phi.tmp=phi; phi.tmp[phi.tmp<0.00001]=0.00001
p2=LogLikMultin(nloc=nloc,ncomm=ncomm,nspp=nspp,phi=phi,Arraylsk=array.lsk)
#get phi prior
p3=ldirichlet(x=phi,alpha=phi.prior)
# log(ddirichlet(phi[2,],rep(phi.prior,nspp)))
#get betas prior
p4=dnorm(betas,mean=0,sd=1,log=T)
#get lambda prior
p5=dgamma(theta[1],a1,b1,log=T)+sum(dgamma(theta[-1],a2,b2,log=T))
#store results
llk.out[i]=sum(p1)+sum(p2)+sum(p3)+sum(p4)+p5
phi.out[i,]=phi
lambda.out[i,]=lambda
nlk.out[i,]=nlk
betas.out[i,]=betas
}
theta
lambda
library(MCMCpack)
library('Rcpp')
library('RcppArmadillo')
set.seed(5)
#get functions
setwd('U:\\GIT_models\\git_LDA_MS')
source('gibbs sampler main function.R')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
#get data
dat=read.csv('fake data8.csv',as.is=T)
xmat=data.matrix(read.csv('fake data xmat8.csv',as.is=T))
y=data.matrix(dat)
#basic settings
ncomm=10
ngibbs=1000
nburn=ngibbs/2
phi.prior=0.1
a1=b1=1
b2=1000
a2=100
res=gibbs.LDA.cov(ncomm=ncomm,ngibbs=ngibbs,nburn=nburn,y=y,xmat=xmat,
phi.prior=phi.prior,a1=a1,b1=b1,a2=a2,b2=b2)
plot(res$lambda[ngibbs,],type='h')
plot(res$llk,type='l')
plot(res$llk[1:ngibbs],type='l')
compare1=function(estim,true){
rango=range(c(true,estim))
plot(true,estim,ylim=rango,xlim=rango)
lines(rango,rango)
}
k=res$lambda[ngibbs,]
plot(k,type='h')
k=res$betas[ngibbs,]
nparam=ncol(xmat)
k1=matrix(k,nparam,ncomm); round(k1,2)
ordem=1:8#c(4,6,3,5,2,9,1,10) #4,6
#look at lambda
compare1(estim=res$lambda[ngibbs,ordem],true=lambda.true)
#look at nlk
tmp=matrix(res$nlk[ngibbs,],nloc,ncomm)
boxplot(tmp)
compare1(estim=tmp[,ordem],true=nlk.true)
k=matrix(res$betas[ngibbs,],nparam,ncomm)
compare1(estim=k[,ordem],true=betas.true)
#look at phi
tmp=matrix(res$phi[ngibbs,],ncomm,nspp)
tmp1=tmp[ordem,]
compare1(estim=tmp1,true=phi.true)
plot(res$lambda[ngibbs,],type='h')
colSums(nlk.true)
library(MCMCpack)
library('Rcpp')
library('RcppArmadillo')
set.seed(5)
#get functions
setwd('U:\\GIT_models\\git_LDA_MS')
source('gibbs sampler main function.R')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
#get data
dat=read.csv('fake data8.csv',as.is=T)
xmat=data.matrix(read.csv('fake data xmat8.csv',as.is=T))
y=data.matrix(dat)
#basic settings
ncomm=10
ngibbs=1000
nburn=ngibbs/2
phi.prior=0.1
a1=b1=1
b2=1000
a2=500
res=gibbs.LDA.cov(ncomm=ncomm,ngibbs=ngibbs,nburn=nburn,y=y,xmat=xmat,
phi.prior=phi.prior,a1=a1,b1=b1,a2=a2,b2=b2)
plot(res$lambda[ngibbs,],type='h')
sum(y)
sum(y)/ncomm
library(MCMCpack)
library('Rcpp')
library('RcppArmadillo')
set.seed(5)
#get functions
setwd('U:\\GIT_models\\git_LDA_MS')
source('gibbs sampler main function.R')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
#get data
dat=read.csv('fake data8.csv',as.is=T)
xmat=data.matrix(read.csv('fake data xmat8.csv',as.is=T))
y=data.matrix(dat)
#basic settings
ncomm=10
ngibbs=1000
nburn=ngibbs/2
phi.prior=0.1
a1=b1=1
a2=1100
b2=5*a2
res=gibbs.LDA.cov(ncomm=ncomm,ngibbs=ngibbs,nburn=nburn,y=y,xmat=xmat,
phi.prior=phi.prior,a1=a1,b1=b1,a2=a2,b2=b2)
library(MCMCpack)
library('Rcpp')
library('RcppArmadillo')
set.seed(5)
#get functions
setwd('U:\\GIT_models\\git_LDA_MS')
source('gibbs sampler main function.R')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
#get data
dat=read.csv('fake data8.csv',as.is=T)
xmat=data.matrix(read.csv('fake data xmat8.csv',as.is=T))
y=data.matrix(dat)
#basic settings
ncomm=10
ngibbs=1000
nburn=ngibbs/2
phi.prior=0.1
a1=b1=1
a2=sum(y)/ncomm
b2=5*a2
res=gibbs.LDA.cov(ncomm=ncomm,ngibbs=ngibbs,nburn=nburn,y=y,xmat=xmat,
phi.prior=phi.prior,a1=a1,b1=b1,a2=a2,b2=b2)
plot(res$lambda[ngibbs,],type='h')
library(MCMCpack)
library('Rcpp')
library('RcppArmadillo')
set.seed(5)
#get functions
setwd('U:\\GIT_models\\git_LDA_MS')
source('gibbs sampler main function.R')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
#get data
dat=read.csv('fake data8.csv',as.is=T)
xmat=data.matrix(read.csv('fake data xmat8.csv',as.is=T))
y=data.matrix(dat)
#basic settings
ncomm=10
ngibbs=1000
nburn=ngibbs/2
phi.prior=0.1
a1=b1=1
a2=sum(y)/ncomm
b2=2*a2
res=gibbs.LDA.cov(ncomm=ncomm,ngibbs=ngibbs,nburn=nburn,y=y,xmat=xmat,
phi.prior=phi.prior,a1=a1,b1=b1,a2=a2,b2=b2)
plot(res$lambda[ngibbs,],type='h')
rm(list=ls(all=TRUE))
library(MCMCpack)
set.seed(5)
nloc=500
nspp=100
ncommun=8
#design matrix
xmat=matrix(runif(nloc*ncommun,min=-1,max=1),nloc,ncommun)
#pure sites
tmp=matrix(-3,ncommun,ncommun)
diag(tmp)=3
for (i in 1:10){
seq1=(ncommun*(i-1)+1):(ncommun*i)
xmat[seq1,]=tmp
}
image(xmat[1:(10*ncommun),])
#parameters
lambda.true=lambda=runif(ncommun,min=2,max=3)
betas.true=betas=diag(0.8,ncommun)
#get means
lambda1=matrix(lambda,nloc,ncommun,byrow=T)
media=exp(log(lambda1)+xmat%*%betas); range(media)
head(media)
#generate N_lk
nlk=matrix(NA,nloc,ncommun)
for (i in 1:ncommun){
nlk[,i]=rpois(nloc,media[,i])
}
nlk.true=nlk; boxplot(nlk)
z=nlk/apply(nlk,1,sum); apply(z,1,sum); boxplot(z); apply(z,2,range)
nl=apply(nlk,1,sum)
hist(nl)
sum(nl)
#generate phi (assuming that each species is strongly present in a single group)
phi=rdirichlet(ncommun,alpha=rep(0.1,nspp))
# for (i in 1:nspp){ #add some zeroes
#   ind=sample(1:ncommun,size=1)
#   tmp[ind,i]=runif(1,min=0.5,max=1)
# }
# phi=tmp/matrix(rowSums(tmp),ncommun,nspp) #re-scale to make sure it sums to 1
# round(phi[,1:20],2)
# table(round(phi,2))
unique(rowSums(phi))
phi.true=phi
image(phi)
#generate actual observations y
y=matrix(NA,nloc,nspp)
nks=matrix(0,ncommun,nspp)
for (i in 1:nloc){
tmp1=rep(0,nspp)
for (k in 1:ncommun){
tmp=rmultinom(1,size=nlk[i,k],prob=phi[k,])
nks[k,]=nks[k,]+tmp
tmp1=tmp1+tmp
}
y[i,]=tmp1
}
image(y)
#look at stuff to make sure it makes sense
phi.estim=nks/matrix(rowSums(nks),ncommun,nspp,)
plot(phi.true,phi.estim)
nks.true=nks
#export results
setwd('U:\\GIT_models\\git_LDA_MS')
nome=paste('fake data',ncommun,'.csv',sep='')
colnames(y)=paste('spp',1:nspp,sep='')
rownames(y)=paste('loc',1:nloc,sep='')
write.csv(y,nome,row.names=F)
nome=paste('fake data xmat',ncommun,'.csv',sep='')
write.csv(xmat,nome,row.names=F)
library(MCMCpack)
library('Rcpp')
library('RcppArmadillo')
set.seed(5)
#get functions
setwd('U:\\GIT_models\\git_LDA_MS')
source('gibbs sampler main function.R')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
#get data
dat=read.csv('fake data8.csv',as.is=T)
xmat=data.matrix(read.csv('fake data xmat8.csv',as.is=T))
y=data.matrix(dat)
#basic settings
ncomm=10
ngibbs=1000
nburn=ngibbs/2
phi.prior=0.1
a1=b1=1
a2=sum(y)/ncomm
b2=2*a2
res=gibbs.LDA.cov(ncomm=ncomm,ngibbs=ngibbs,nburn=nburn,y=y,xmat=xmat,
phi.prior=phi.prior,a1=a1,b1=b1,a2=a2,b2=b2)
plot(res$lambda[ngibbs,],type='h')
plot(res$llk[1:ngibbs],type='l')
compare1=function(estim,true){
rango=range(c(true,estim))
plot(true,estim,ylim=rango,xlim=rango)
lines(rango,rango)
}
k=res$lambda[ngibbs,]
plot(k,type='h')
k=res$betas[ngibbs,]
nparam=ncol(xmat)
k1=matrix(k,nparam,ncomm); round(k1,2)
lambda.true
compare1(estim=res$lambda[ngibbs,ordem],true=lambda.true)
ordem=1:8#c(4,6,3,5,2,9,1,10) #4,6
#look at lambda
compare1(estim=res$lambda[ngibbs,ordem],true=lambda.true)
tmp=matrix(res$nlk[ngibbs,],nloc,ncomm)
boxplot(tmp)
compare1(estim=tmp[,ordem],true=nlk.true)
library(MCMCpack)
library('Rcpp')
library('RcppArmadillo')
set.seed(5)
#get functions
setwd('U:\\GIT_models\\git_LDA_MS')
source('gibbs sampler main function.R')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
#get data
dat=read.csv('fake data8.csv',as.is=T)
xmat=data.matrix(read.csv('fake data xmat8.csv',as.is=T))
y=data.matrix(dat)
#basic settings
ncomm=10
ngibbs=1000
nburn=ngibbs/2
phi.prior=0.1
a1=b1=1
a2=sum(y)/ncomm
b2=2*a2
res=gibbs.LDA.cov(ncomm=ncomm,ngibbs=ngibbs,nburn=nburn,y=y,xmat=xmat,
phi.prior=phi.prior,a1=a1,b1=b1,a2=a2,b2=b2)
plot(res$llk[1:ngibbs],type='l')
compare1=function(estim,true){
rango=range(c(true,estim))
plot(true,estim,ylim=rango,xlim=rango)
lines(rango,rango)
}
k=res$lambda[ngibbs,]
plot(k,type='h')
k=res$betas[ngibbs,]
nparam=ncol(xmat)
k1=matrix(k,nparam,ncomm); round(k1,2)
rm(list=ls(all=TRUE))
library(MCMCpack)
set.seed(5)
nloc=500
nspp=100
ncommun=8
#design matrix
xmat=matrix(runif(nloc*ncommun,min=-1,max=1),nloc,ncommun)
#pure sites
tmp=matrix(-3,ncommun,ncommun)
diag(tmp)=3
for (i in 1:10){
seq1=(ncommun*(i-1)+1):(ncommun*i)
xmat[seq1,]=tmp
}
image(xmat[1:(10*ncommun),])
#parameters
lambda.true=lambda=runif(ncommun,min=2,max=3)
betas.true=betas=diag(0.8,ncommun)
#get means
lambda1=matrix(lambda,nloc,ncommun,byrow=T)
media=exp(log(lambda1)+xmat%*%betas); range(media)
head(media)
#generate N_lk
nlk=matrix(NA,nloc,ncommun)
for (i in 1:ncommun){
nlk[,i]=rpois(nloc,media[,i])
}
nlk.true=nlk; boxplot(nlk)
z=nlk/apply(nlk,1,sum); apply(z,1,sum); boxplot(z); apply(z,2,range)
nl=apply(nlk,1,sum)
hist(nl)
sum(nl)
#generate phi (assuming that each species is strongly present in a single group)
phi=rdirichlet(ncommun,alpha=rep(0.1,nspp))
# for (i in 1:nspp){ #add some zeroes
#   ind=sample(1:ncommun,size=1)
#   tmp[ind,i]=runif(1,min=0.5,max=1)
# }
# phi=tmp/matrix(rowSums(tmp),ncommun,nspp) #re-scale to make sure it sums to 1
# round(phi[,1:20],2)
# table(round(phi,2))
unique(rowSums(phi))
phi.true=phi
image(phi)
#generate actual observations y
y=matrix(NA,nloc,nspp)
nks=matrix(0,ncommun,nspp)
rm(list=ls(all=TRUE))
library(MCMCpack)
set.seed(5)
nloc=500
nspp=100
ncommun=8
#design matrix
xmat=matrix(runif(nloc*ncommun,min=-1,max=1),nloc,ncommun)
#pure sites
tmp=matrix(-3,ncommun,ncommun)
diag(tmp)=3
for (i in 1:10){
seq1=(ncommun*(i-1)+1):(ncommun*i)
xmat[seq1,]=tmp
}
image(xmat[1:(10*ncommun),])
#parameters
lambda.true=lambda=runif(ncommun,min=2,max=3)
betas.true=betas=diag(0.8,ncommun)
#get means
lambda1=matrix(lambda,nloc,ncommun,byrow=T)
media=exp(log(lambda1)+xmat%*%betas); range(media)
head(media)
#generate N_lk
nlk=matrix(NA,nloc,ncommun)
for (i in 1:ncommun){
nlk[,i]=rpois(nloc,media[,i])
}
nlk.true=nlk; boxplot(nlk)
z=nlk/apply(nlk,1,sum); apply(z,1,sum); boxplot(z); apply(z,2,range)
nl=apply(nlk,1,sum)
hist(nl)
sum(nl)
#generate phi (assuming that each species is strongly present in a single group)
phi=rdirichlet(ncommun,alpha=rep(0.1,nspp))
# for (i in 1:nspp){ #add some zeroes
#   ind=sample(1:ncommun,size=1)
#   tmp[ind,i]=runif(1,min=0.5,max=1)
# }
# phi=tmp/matrix(rowSums(tmp),ncommun,nspp) #re-scale to make sure it sums to 1
# round(phi[,1:20],2)
# table(round(phi,2))
unique(rowSums(phi))
phi.true=phi
image(phi)
#generate actual observations y
y=matrix(NA,nloc,nspp)
nks=matrix(0,ncommun,nspp)
for (i in 1:nloc){
tmp1=rep(0,nspp)
for (k in 1:ncommun){
tmp=rmultinom(1,size=nlk[i,k],prob=phi[k,])
nks[k,]=nks[k,]+tmp
tmp1=tmp1+tmp
}
y[i,]=tmp1
}
image(y)
#look at stuff to make sure it makes sense
phi.estim=nks/matrix(rowSums(nks),ncommun,nspp,)
plot(phi.true,phi.estim)
nks.true=nks
#export results
setwd('U:\\GIT_models\\git_LDA_MS')
nome=paste('fake data',ncommun,'.csv',sep='')
colnames(y)=paste('spp',1:nspp,sep='')
rownames(y)=paste('loc',1:nloc,sep='')
write.csv(y,nome,row.names=F)
nome=paste('fake data xmat',ncommun,'.csv',sep='')
write.csv(xmat,nome,row.names=F)
library(MCMCpack)
library('Rcpp')
library('RcppArmadillo')
set.seed(5)
#get functions
setwd('U:\\GIT_models\\git_LDA_MS')
source('gibbs sampler main function.R')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
dat=read.csv('fake data8.csv',as.is=T)
xmat=data.matrix(read.csv('fake data xmat8.csv',as.is=T))
y=data.matrix(dat)
#basic settings
ncomm=10
ngibbs=1000
nburn=ngibbs/2
phi.prior=0.1
a1=b1=1
a2=sum(y)/ncomm
b2=2*a2
res=gibbs.LDA.cov(ncomm=ncomm,ngibbs=ngibbs,nburn=nburn,y=y,xmat=xmat,
phi.prior=phi.prior,a1=a1,b1=b1,a2=a2,b2=b2)
library(MCMCpack)
library('Rcpp')
library('RcppArmadillo')
set.seed(5)
#get functions
setwd('U:\\GIT_models\\git_LDA_MS')
source('gibbs sampler main function.R')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
#get data
dat=read.csv('fake data8.csv',as.is=T)
xmat=data.matrix(read.csv('fake data xmat8.csv',as.is=T))
y=data.matrix(dat)
#basic settings
ncomm=10
ngibbs=1000
nburn=ngibbs/2
phi.prior=0.1
a1=b1=1
a2=sum(y)/ncomm
b2=2*a2
res=gibbs.LDA.cov(ncomm=ncomm,ngibbs=ngibbs,nburn=nburn,y=y,xmat=xmat,
phi.prior=phi.prior,a1=a1,b1=b1,a2=a2,b2=b2)
library(MCMCpack)
library('Rcpp')
library('RcppArmadillo')
set.seed(5)
#get functions
setwd('U:\\GIT_models\\git_LDA_MS')
source('gibbs sampler main function.R')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
#get data
dat=read.csv('fake data8.csv',as.is=T)
xmat=data.matrix(read.csv('fake data xmat8.csv',as.is=T))
y=data.matrix(dat)
#basic settings
ncomm=10
ngibbs=1000
nburn=ngibbs/2
phi.prior=0.1
a1=b1=1
a2=sum(y)/ncomm
b2=2*a2
