ngroups=5
z=rep(1:ngroups,each=n/ngroups)#sample(1:ngroups,size=n,replace=T)
#define parameters
mu.c=seq(from=0.1,to=1,length.out=ngroups)
sig2.c=rep(0.1,ngroups)
k.c=seq(from=0.2,to=10,length.out=ngroups)
kc
k.c
rm(list=ls(all=TRUE))
library('circular')
set.seed(1)
n=1000
dat=matrix(NA,n,4)
colnames(dat)=c('utmx','utmy')
dat[1,]=c(0,0)
#define states
ngroups=5
z=rep(1:ngroups,each=n/ngroups)#sample(1:ngroups,size=n,replace=T)
#define parameters
mu.c=seq(from=0.1,to=1,length.out=ngroups)
sig2.c=rep(0.1,ngroups)
k.c=seq(from=10,to=0.2,length.out=ngroups)
rm(list=ls(all=TRUE))
set.seed(1)
n=1000
dat=matrix(NA,n,4)
colnames(dat)=c('utmx','utmy','angle')
dat[1,]=c(0,0,0)
#define states
ngroups=5
z=rep(1:ngroups,each=n/ngroups)#sample(1:ngroups,size=n,replace=T)
rm(list=ls(all=TRUE))
set.seed(1)
n=1000
dat=matrix(NA,n,3)
colnames(dat)=c('utmx','utmy','angle')
dat[1,]=c(0,0,0)
#define states
ngroups=5
z=rep(1:ngroups,each=n/ngroups)#sample(1:ngroups,size=n,replace=T)
mu.c=seq(from=0.1,to=1,length.out=ngroups)
sig2.c=rep(0.1,ngroups)
rm(list=ls(all=TRUE))
set.seed(1)
n=1000
dat=matrix(NA,n,3)
colnames(dat)=c('utmx','utmy','angle')
dat[1,]=c(0,0,0)
#define states
ngroups=5
z=rep(1:ngroups,each=n/ngroups)#sample(1:ngroups,size=n,replace=T)
#define parameters
mu.c=seq(from=0.1,to=1,length.out=ngroups)
sig2.c=rep(0.1,ngroups)
u.c=seq(from=10,to=0.2,length.out=ngroups)
rm(list=ls(all=TRUE))
set.seed(1)
n=1000
dat=matrix(NA,n,3)
colnames(dat)=c('utmx','utmy','angle')
dat[1,]=c(0,0,0)
#define states
ngroups=5
z=rep(1:ngroups,each=n/ngroups)#sample(1:ngroups,size=n,replace=T)
#define parameters
mu.c=seq(from=0.1,to=1,length.out=ngroups)
sig2.c=rep(0.1,ngroups)
u.c=seq(from=10,to=0.2,length.out=ngroups)
#get distances and changes in angle
d=rnorm(n,mean=mu.c[z],sd=sqrt(sig2.c[z]))
w=rbeta(n,u.c[z],u.c[z])
angles=2*pi*w-pi
hist(angles[z==1])
hist(angles[z==5])
rm(list=ls(all=TRUE))
set.seed(1)
n=1000
dat=matrix(NA,n,3)
colnames(dat)=c('utmx','utmy','angle')
dat[1,]=c(0,0,0)
#define states
ngroups=5
z=rep(1:ngroups,each=n/ngroups)#sample(1:ngroups,size=n,replace=T)
#define parameters
mu.c=seq(from=0.1,to=1,length.out=ngroups)
sig2.c=rep(0.1,ngroups)
u.c=seq(from=10,to=0.2,length.out=ngroups)
#get distances and changes in angle
d=rnorm(n,mean=mu.c[z],sd=sqrt(sig2.c[z]))
w=rbeta(n,u.c[z],u.c[z])
tangles=2*pi*w-pi
hist(tangles[z==5])
rm(list=ls(all=TRUE))
set.seed(1)
n=1000
dat=matrix(NA,n,4)
colnames(dat)=c('utmx','utmy','angle','distance')
dat[1,]=c(0,0,0,NA)
#define states
ngroups=5
z=rep(1:ngroups,each=n/ngroups)#sample(1:ngroups,size=n,replace=T)
#define parameters
mu.c=seq(from=0.1,to=1,length.out=ngroups)
sig2.c=rep(0.1,ngroups)
u.c=seq(from=10,to=0.2,length.out=ngroups)
#get distances and changes in angle
d=rnorm(n,mean=mu.c[z],sd=sqrt(sig2.c[z]))
w=rbeta(n,u.c[z],u.c[z])
tangles=2*pi*w-pi
hist(tangles[z==5])
#calculate corresponding positions
for (i in 2:n){
angle=dat[i-1,'angle']+tangles[i-1]
delta.y=sin(angle)*exp(d[i-1])
delta.x=cos(angle)*exp(d[i-1])
new.x=dat[i-1,'utmx']+delta.x
new.y=dat[i-1,'utmy']+delta.y
dat[i,]=c(new.x,new.y,d[i-1],angle)
}
#plot results
plot(NA,NA,xlim=range(dat[,'utmx']),ylim=range(dat[,'utmy']))
for (i in 1:ngroups){
cond=z==i
dat1=dat[cond,]
lines(dat1[,'utmx'],dat1[,'utmy'],col=i)
}
rm(list=ls(all=TRUE))
set.seed(1)
n=1000
dat=matrix(NA,n,4)
colnames(dat)=c('utmx','utmy','angle','distance')
dat[1,]=c(0,0,0,NA)
#define states
ngroups=5
z=rep(1:ngroups,each=n/ngroups)#sample(1:ngroups,size=n,replace=T)
#define parameters
mu.c=seq(from=0.1,to=1,length.out=ngroups)
sig2.c=rep(0.1,ngroups)
u.c=seq(from=3,to=0.2,length.out=ngroups)
#get distances and changes in angle
d=rnorm(n,mean=mu.c[z],sd=sqrt(sig2.c[z]))
w=rbeta(n,u.c[z],u.c[z])
tangles=2*pi*w-pi; range(tangles)
hist(tangles[z==5])
#calculate corresponding positions
for (i in 2:n){
angle=dat[i-1,'angle']+tangles[i-1]
delta.y=sin(angle)*exp(d[i-1])
delta.x=cos(angle)*exp(d[i-1])
new.x=dat[i-1,'utmx']+delta.x
new.y=dat[i-1,'utmy']+delta.y
dat[i,]=c(new.x,new.y,d[i-1],angle)
}
#plot results
plot(NA,NA,xlim=range(dat[,'utmx']),ylim=range(dat[,'utmy']))
for (i in 1:ngroups){
cond=z==i
dat1=dat[cond,]
lines(dat1[,'utmx'],dat1[,'utmy'],col=i)
}
range(tangles)
sin(pi/2)
sin(pi/4)
sin(pi/2)
sin(3*pi/4)
?sin
sin(5*pi/4)
rm(list=ls(all=TRUE))
set.seed(1)
n=1000
dat=matrix(NA,n,4)
colnames(dat)=c('utmx','utmy','angle','distance')
dat[1,]=c(0,0,0,NA)
#define states
ngroups=5
z=rep(1:ngroups,each=n/ngroups)#sample(1:ngroups,size=n,replace=T)
#define parameters
mu.c=seq(from=0.1,to=1,length.out=ngroups)
sig2.c=rep(0.1,ngroups)
u.c=seq(from=3,to=0.2,length.out=ngroups)
#get distances and changes in angle
d=rnorm(n,mean=mu.c[z],sd=sqrt(sig2.c[z]))
w=rbeta(n,u.c[z],u.c[z])
tangles=2*pi*w-pi; range(tangles)
hist(tangles[z==5])
i=1
i=2
tangles[i-1]
dat[i-1,'angle']
angle=dat[i-1,'angle']+tangles[i-1]
sin(angle)*exp(d[i-1])
cos(angle)*exp(d[i-1])
sqrt((delta.y^2)+(delta.x^2))
delta.y=sin(angle)*exp(d[i-1])
delta.x=cos(angle)*exp(d[i-1])
sqrt((delta.y^2)+(delta.x^2))
exp(d[i-1])
rm(list=ls(all=TRUE))
set.seed(1)
n=1000
dat=matrix(NA,n,4)
colnames(dat)=c('utmx','utmy','angle','distance')
dat[1,]=c(0,0,0,NA)
#define states
ngroups=5
z=rep(1:ngroups,each=n/ngroups)#sample(1:ngroups,size=n,replace=T)
#define parameters
mu.c=seq(from=0.1,to=1,length.out=ngroups)
sig2.c=rep(0.1,ngroups)
u.c=seq(from=3,to=0.2,length.out=ngroups)
#get distances and changes in angle
d=rnorm(n,mean=mu.c[z],sd=sqrt(sig2.c[z]))
w=rbeta(n,u.c[z],u.c[z])
tangles=2*pi*w-pi; range(tangles)
hist(tangles[z==5])
#calculate corresponding positions
for (i in 2:n){
angle=dat[i-1,'angle']+tangles[i-1]
delta.y=sin(angle)*exp(d[i-1])
delta.x=cos(angle)*exp(d[i-1])
new.x=dat[i-1,'utmx']+delta.x
new.y=dat[i-1,'utmy']+delta.y
dat[i,]=c(new.x,new.y,d[i-1],angle)
}
hist(dat[z==1,'angle'])
hist(dat[z==2,'angle'])
hist(dat[z==3,'angle'])
hist(dat[z==4,'angle'])
hist(dat[z==5,'angle'])
u.c
rm(list=ls(all=TRUE))
library('Rcpp')
library('mvtnorm')
set.seed(4)
#get functions
setwd('U:\\GIT_models\\git_LDA_MS')
source('gibbs functions.R')
source('gibbs sampler main function.R')
sourceCpp('aux1.cpp')
#get data
tmp=read.csv('fake data4.csv',as.is=T)
ind=which(colnames(tmp)=='X')
dat=tmp[,-ind]
nloc=nrow(dat)
dmat=read.csv('fake data4 dmat.csv',as.is=T)
dmat=data.matrix(dmat)
#basic settings
mu=3
ncomm=10
ngibbs=1000
phi.prior=0.1
nburn=ngibbs/2
#fit model
res=lda.abundance.regression(dat=dat,ncomm=ncomm,phi.prior=phi.prior,ngibbs=ngibbs,mu=mu,nburn=nburn,dmat=dmat)
library(MCMCpack)
set.seed(5)
nloc=5000
nspp=100
ncommun=4
base=floor(nloc/(ncommun-2))
nparam=ncommun-1
#we have to make sure that each community dominates at least some locations
xmat=cbind(c(rep(0,nloc*0.2),rep(6,nloc*0.6),runif(nloc*0.2,min=0,max=6)),
c(rep(6,nloc*0.2),rep(0,nloc*0.2),rep(6,nloc*0.4),runif(nloc*0.2,min=0,max=6)),
c(rep(6,nloc*0.4),rep(0,nloc*0.2),rep(6,nloc*0.2),runif(nloc*0.2,min=0,max=6)))
betas=matrix(0,nparam,ncommun-1)
diag(betas)=c(-1,-1,-1)
betas.true=betas
mu=3
medias.true=medias=mu+xmat%*%betas
psi=matrix(NA,nloc,ncommun-1)
sig2.true=sig2=rep(3.72,ncommun-1)
for (i in 1:(ncommun-1)){
psi[,i]=rnorm(nloc,mean=medias[,i],sd=sqrt(sig2[i]))
}
psi.true=psi
apply(psi,2,range)
#generate thetas
theta=matrix(NA,nloc,ncommun)
aux=rep(1,nloc)
for (i in 1:(ncommun-1)){
tmp=pnorm(psi[,i])
theta[,i]=tmp*aux
aux=aux*(1-tmp)
}
theta[,ncommun]=aux
theta.true=theta
boxplot(theta)
apply(theta>0.9,2,mean)
unique(apply(theta,1,sum))
for (i in 1:(ncommun-1)) plot(xmat[,i],theta[,i],main=i)
#generate phi
tmp=rdirichlet(ncommun,alpha=rep(1,nspp))
for (i in 1:nspp){
ind=sample(1:ncommun,size=ncommun/2)
tmp[ind,i]=0
}
phi=tmp/matrix(rowSums(tmp),ncommun,nspp)
round(phi[,1:20],2)
table(round(phi,2))
unique(rowSums(phi))
phi.true=phi
image(phi)
#generate actual observations y
nl=floor(runif(nloc,min=200,max=400))
nlk=matrix(NA,nloc,ncommun)
nks=matrix(0,ncommun,nspp)
y=matrix(NA,nloc,nspp)
for (i in 1:nloc){
nlk[i,]=rmultinom(1,size=nl[i],prob=theta[i,])
tmp1=rep(0,nspp)
for (k in 1:ncommun){
tmp=rmultinom(1,size=nlk[i,k],prob=phi[k,])
nks[k,]=nks[k,]+tmp
tmp1=tmp1+tmp
}
y[i,]=tmp1
}
# image(y)
#look at stuff to make sure it makes sense
theta.estim=nlk/matrix(nl,nloc,ncommun)
plot(NA,NA,xlim=c(1,nloc),ylim=c(0,1))
for (i in 1:ncommun) lines(1:nloc,theta.estim[,i],col=i)
nlk.true=nlk
phi.estim=nks/matrix(rowSums(nks),ncommun,nspp,)
plot(phi.true,phi.estim)
nks.true=nks
betas.estim=matrix(apply(res$betas,2,mean),ncol(dmat),ncomm-1)
sig2.estim=sig2=apply(res$sig2,2,mean)
psi=matrix(apply(res$psi,2,mean),nloc,ncomm-1)
phi.estim=matrix(apply(res$phi,2,mean),ncomm,ncol(dat))
tmp=res$theta[nrow(res$theta),]
theta.estim=matrix(tmp,nloc,ncomm)
boxplot(theta.estim)
#compare thetas
ind1=numeric()
for (i in 1:ncol(theta.true)){
cor1=numeric()
for (j in 1:ncol(theta.estim)){
tmp=cbind(theta.estim[,j],theta.true[,i])
cor1=c(cor1,cor(tmp)[1,2])
}
ind=which(cor1==max(cor1))
ind1=c(ind1,ind)
}
ind1
theta.estim1=theta.estim[,ind1]
rango=c(0,1)
plot(theta.true,theta.estim1,xlim=rango,ylim=rango)
lines(rango,rango,col='red',lwd=2)
rm(list=ls(all=TRUE))
library('Rcpp')
library('mvtnorm')
set.seed(4)
#get functions
setwd('U:\\GIT_models\\git_LDA_MS')
source('gibbs functions.R')
source('gibbs sampler main function.R')
sourceCpp('aux1.cpp')
#get data
tmp=read.csv('fake data4.csv',as.is=T)
ind=which(colnames(tmp)=='X')
dat=tmp[,-ind]
nloc=nrow(dat)
dmat=read.csv('fake data4 dmat.csv',as.is=T)
dmat=data.matrix(dmat)
#basic settings
mu=3
ncomm=10
ngibbs=1000
phi.prior=0.1
nburn=ngibbs/2
#fit model
res=lda.abundance.regression(dat=dat,ncomm=ncomm,phi.prior=phi.prior,ngibbs=ngibbs,mu=mu,nburn=nburn,dmat=dmat)
library(MCMCpack)
set.seed(5)
nloc=5000
nspp=100
ncommun=4
base=floor(nloc/(ncommun-2))
nparam=ncommun-1
#we have to make sure that each community dominates at least some locations
xmat=cbind(c(rep(0,nloc*0.2),rep(6,nloc*0.6),runif(nloc*0.2,min=0,max=6)),
c(rep(6,nloc*0.2),rep(0,nloc*0.2),rep(6,nloc*0.4),runif(nloc*0.2,min=0,max=6)),
c(rep(6,nloc*0.4),rep(0,nloc*0.2),rep(6,nloc*0.2),runif(nloc*0.2,min=0,max=6)))
betas=matrix(0,nparam,ncommun-1)
diag(betas)=c(-1,-1,-1)
betas.true=betas
mu=3
medias.true=medias=mu+xmat%*%betas
psi=matrix(NA,nloc,ncommun-1)
sig2.true=sig2=rep(3.72,ncommun-1)
for (i in 1:(ncommun-1)){
psi[,i]=rnorm(nloc,mean=medias[,i],sd=sqrt(sig2[i]))
}
psi.true=psi
apply(psi,2,range)
#generate thetas
theta=matrix(NA,nloc,ncommun)
aux=rep(1,nloc)
for (i in 1:(ncommun-1)){
tmp=pnorm(psi[,i])
theta[,i]=tmp*aux
aux=aux*(1-tmp)
}
theta[,ncommun]=aux
theta.true=theta
boxplot(theta)
apply(theta>0.9,2,mean)
unique(apply(theta,1,sum))
for (i in 1:(ncommun-1)) plot(xmat[,i],theta[,i],main=i)
#generate phi
tmp=rdirichlet(ncommun,alpha=rep(1,nspp))
for (i in 1:nspp){
ind=sample(1:ncommun,size=ncommun/2)
tmp[ind,i]=0
}
phi=tmp/matrix(rowSums(tmp),ncommun,nspp)
round(phi[,1:20],2)
table(round(phi,2))
unique(rowSums(phi))
phi.true=phi
image(phi)
#generate actual observations y
nl=floor(runif(nloc,min=200,max=400))
nlk=matrix(NA,nloc,ncommun)
nks=matrix(0,ncommun,nspp)
y=matrix(NA,nloc,nspp)
for (i in 1:nloc){
nlk[i,]=rmultinom(1,size=nl[i],prob=theta[i,])
tmp1=rep(0,nspp)
for (k in 1:ncommun){
tmp=rmultinom(1,size=nlk[i,k],prob=phi[k,])
nks[k,]=nks[k,]+tmp
tmp1=tmp1+tmp
}
y[i,]=tmp1
}
# image(y)
#look at stuff to make sure it makes sense
theta.estim=nlk/matrix(nl,nloc,ncommun)
plot(NA,NA,xlim=c(1,nloc),ylim=c(0,1))
for (i in 1:ncommun) lines(1:nloc,theta.estim[,i],col=i)
nlk.true=nlk
phi.estim=nks/matrix(rowSums(nks),ncommun,nspp,)
plot(phi.true,phi.estim)
nks.true=nks
betas.estim=matrix(apply(res$betas,2,mean),ncol(dmat),ncomm-1)
sig2.estim=sig2=apply(res$sig2,2,mean)
psi=matrix(apply(res$psi,2,mean),nloc,ncomm-1)
phi.estim=matrix(apply(res$phi,2,mean),ncomm,ncol(dat))
tmp=res$theta[nrow(res$theta),]
theta.estim=matrix(tmp,nloc,ncomm)
boxplot(theta.estim)
#compare thetas
ind1=numeric()
for (i in 1:ncol(theta.true)){
cor1=numeric()
for (j in 1:ncol(theta.estim)){
tmp=cbind(theta.estim[,j],theta.true[,i])
cor1=c(cor1,cor(tmp)[1,2])
}
ind=which(cor1==max(cor1))
ind1=c(ind1,ind)
}
ind1
theta.estim1=theta.estim[,ind1]
rango=c(0,1)
plot(theta.true,theta.estim1,xlim=rango,ylim=rango)
lines(rango,rango,col='red',lwd=2)
#look at phi
phi.estim1=phi.estim[ind1,]
rango=range(c(phi.true,phi.estim1))
plot(phi.true,phi.estim1,xlim=rango,ylim=rango)
lines(rango,rango,col='red',lwd=2)
#------------------------------------------------
resp.curve=function(medias,sig2,nsim){
nobs=nrow(medias)
ngroups=ncol(medias)+1
theta=matrix(NA,nobs,ngroups)
sig.mat=matrix(sqrt(sig2),nsim,ngroups-1,byrow=T)
for (i in 1:nobs){
medias.mat=matrix(medias[i,],nsim,ngroups-1,byrow=T)
tmp=rnorm(nsim*(ngroups-1),mean=medias.mat,sd=sig.mat)
tmp1=matrix(tmp,nsim,ngroups-1)
v=pnorm(tmp1)
res=convertVtoTheta(vmat=cbind(v,1),prod=rep(1,nloc))
theta[i,]=apply(res,2,mean)
}
theta
}
#------------------------------------------------
#look at response curves
nparam=ncol(dmat)
seq1=seq(from=0,to=6,length.out=100)
for (i in 1:nparam){
xmat=matrix(6,100,nparam)
xmat[,i]=seq1
#calculate implied true theta
media.true=xmat%*%betas.true
theta=resp.curve(medias=media.true,sig2=sig2.true,nsim=1000)
plot(NA,NA,xlim=range(seq1),ylim=c(0,1),main=i)
for (j in 1:ncol(theta)){
lines(seq1,theta[,j],col=j)
}
#calculate implied estimated theta
media.estim=xmat%*%betas.estim
theta1=resp.curve(medias=media.estim,sig2=sig2.estim,nsim=1000)[,ind1]
for (j in 1:ncol(theta1)){
lines(seq1,theta1[,j],col=j,lty=2)
}
}
